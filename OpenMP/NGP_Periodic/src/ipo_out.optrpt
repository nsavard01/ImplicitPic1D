Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.


    Report from: Interprocedural optimizations [ipo]

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: disabled
  -inline-max-per-compile: disabled


Begin optimization report for: BOUNDPLASMAEXAMPLE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (BOUNDPLASMAEXAMPLE) [1] ../../SharedModules/src/BoundPlasmaExample.f90(1,9)
  -> (25,10) INITIALIZESCHEME
  -> (26,10) READINITIALINPUTS
  -> (27,10) INITIALIZERANDOMGENERATORS
  -> (28,10) READWORLD
  -> (29,10) READSOLVER
  -> (30,10) READCHARGEDPARTICLEINPUTS
  -> (31,10) READNEUTRALPARTICLEINPUTS
  -> (32,10) READNULLCOLLISIONINPUTS
  -> (37,10) READINJECTIONINPUTS
  -> (38,10) INITIALIZESOLVER
  -> (40,10) SOLVEINITIALPOTENTIAL
  -> (109,10) SOLVESIMULATION
  -> (110,10) SOLVESIMULATIONFINALAVERAGE


    Report from: Code generation optimizations [cg]

../../SharedModules/src/BoundPlasmaExample.f90(1,9):remark #34051: REGISTER ALLOCATION : [MAIN__] ../../SharedModules/src/BoundPlasmaExample.f90:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rdx rcx rsi rdi r8-r9 r12]
        
    Routine temporaries
        Total         :     102
            Global    :      12
            Local     :      90
        Regenerable   :      71
        Spilled       :       1
        
    Routine stack
        Variables     :     132 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :      16 [1.23e+01 ~ 12.3%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: READWORLD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (READWORLD) [2] mod_domain.f90(217,16)
  -> INLINE: (249,27) GETDEBYELENGTH
  -> (254,17) MOD_DOMAIN::DOMAIN_CONSTRUCTOR
  -> (256,18) CONSTRUCTGRID
  -> INLINE: (261,18) MAKEARRAYSFROMGRID


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(160,9) inlined into mod_domain.f90(261,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (161:13) and at (161:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mod_domain.f90(160,9) inlined into mod_domain.f90(261,18)
<Remainder>
LOOP END

LOOP BEGIN at mod_domain.f90(163,9) inlined into mod_domain.f90(261,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (164:13) and at (164:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mod_domain.f90(163,9) inlined into mod_domain.f90(261,18)
<Remainder>
LOOP END

LOOP BEGIN at mod_domain.f90(268,36)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(268,36)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ mod_domain.f90(268,36) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(268,36)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(268,36)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(223,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
mod_domain.f90(217,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_readworld_] mod_domain.f90:217

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     801
            Global    :      93
            Local     :     708
        Regenerable   :     354
        Spilled       :       8
        
    Routine stack
        Variables     :    1612 bytes*
            Reads     :      20 [1.17e+00 ~ 1.2%]
            Writes    :     158 [1.33e+01 ~ 13.3%]
        Spills        :      24 bytes*
            Reads     :       3 [1.61e-01 ~ 0.2%]
            Writes    :       4 [1.72e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_DOMAIN::DOMAIN_CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_DOMAIN::DOMAIN_CONSTRUCTOR) [3] mod_domain.f90(39,27)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(44,9)
<Peeled loop for vectorization>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_domain.f90(44,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(44,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at mod_domain.f90(44,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(44,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(44,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(44,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(45,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(45,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(45,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(45,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(46,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(46,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(46,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(46,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(47,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_domain.f90(47,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_domain.f90(47,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(39,27):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (1, 0)
mod_domain.f90(47,9):remark #34026: call to memset implemented as a call to optimized library version
mod_domain.f90(39,27):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_domain_constructor_] mod_domain.f90:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     380
            Global    :      97
            Local     :     283
        Regenerable   :      46
        Spilled       :       8
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       6 [5.86e-01 ~ 0.6%]
            Writes    :      12 [1.08e+00 ~ 1.1%]
        Spills        :      24 bytes*
            Reads     :       3 [1.99e-01 ~ 0.2%]
            Writes    :       3 [2.93e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CONSTRUCTGRID

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CONSTRUCTGRID) [4] mod_domain.f90(57,16)
  -> INDIRECT-: (*((P64*) *((P64*) (mod_domain_mp_constructgrid_$SELF_V$2ed.11.77 + 56(SI64)))))[3(SI64)]
     -tbp-> CONSTRUCTUNIFORMGRID
      -> INLINE: (63,18) CONSTRUCTUNIFORMGRID
  -> INDIRECT-: (*((P64*) *((P64*) (mod_domain_mp_constructgrid_$SELF_V$2ed.11.77 + 56(SI64)))))[2(SI64)]
     -tbp-> CONSTRUCTSINEGRID
      -> INLINE: (65,18) CONSTRUCTSINEGRID
  -> INDIRECT-: (*((P64*) *((P64*) (mod_domain_mp_constructgrid_$SELF_V$2ed.11.77 + 56(SI64)))))[1(SI64)]
     -tbp-> CONSTRUCTHALFSINEGRID
      -> INLINE: (67,18) CONSTRUCTHALFSINEGRID
  -> INDIRECT-: (*((P64*) *((P64*) (mod_domain_mp_constructgrid_$SELF_V$2ed.11.77 + 56(SI64)))))[5(SI64)]
     -tbp-> CONSTRUCTEXPHALFGRID
      -> INLINE: (69,18) CONSTRUCTEXPHALFGRID
  -> INDIRECT-: (*((P64*) *((P64*) (mod_domain_mp_constructgrid_$SELF_V$2ed.11.77 + 56(SI64)))))[6(SI64)]
     -tbp-> MAKEARRAYSFROMGRID
      -> INLINE: (74,14) MAKEARRAYSFROMGRID


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(152,9) inlined into mod_domain.f90(63,18)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(152,9) inlined into mod_domain.f90(63,18)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(152,9) inlined into mod_domain.f90(63,18)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(89,9) inlined into mod_domain.f90(65,18)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(89,9) inlined into mod_domain.f90(65,18)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(89,9) inlined into mod_domain.f90(65,18)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(106,9) inlined into mod_domain.f90(67,18)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(106,9) inlined into mod_domain.f90(67,18)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(106,9) inlined into mod_domain.f90(67,18)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(136,9) inlined into mod_domain.f90(69,18)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(136,9) inlined into mod_domain.f90(69,18)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(136,9) inlined into mod_domain.f90(69,18)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(160,9) inlined into mod_domain.f90(74,14)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(160,9) inlined into mod_domain.f90(74,14)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(160,9) inlined into mod_domain.f90(74,14)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(160,9) inlined into mod_domain.f90(74,14)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(163,9) inlined into mod_domain.f90(74,14)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(163,9) inlined into mod_domain.f90(74,14)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(163,9) inlined into mod_domain.f90(74,14)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(163,9) inlined into mod_domain.f90(74,14)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(57,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_constructgrid_] mod_domain.f90:57

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   35[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm19 k1]
        
    Routine temporaries
        Total         :     866
            Global    :     243
            Local     :     623
        Regenerable   :     167
        Spilled       :      80
        
    Routine stack
        Variables     :     408 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      26 [3.24e-01 ~ 0.3%]
        Spills        :    1168 bytes*
            Reads     :     115 [3.96e+00 ~ 4.0%]
            Writes    :     106 [3.06e+00 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: READSOLVER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (READSOLVER) [5] mod_potentialSolver.f90(408,16)
  -> INLINE: (449,18) MOD_POTENTIALSOLVER::POTENTIALSOLVER_CONSTRUCTOR
    -> INLINE: (52,14) MOD_POTENTIALSOLVER^CONSTRUCT_DIAGMATRIX


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(91,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(91,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(91,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(92,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(92,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(92,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(93,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(93,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(93,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(53,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(53,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(53,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(54,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(54,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(54,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(55,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(55,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(55,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(75,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(75,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(75,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(83,9) inlined into mod_potentialSolver.f90(449,18)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(83,9) inlined into mod_potentialSolver.f90(449,18)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(83,9) inlined into mod_potentialSolver.f90(449,18)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at mod_potentialSolver.f90(124,9) inlined into mod_potentialSolver.f90(449,18)
   remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ mod_potentialSolver.f90(95,26) ]
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(414,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
mod_potentialSolver.f90(44,36):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
mod_potentialSolver.f90(91,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(92,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(93,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(53,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(54,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(55,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(75,9):remark #34026: call to memcpy implemented as a call to optimized library version
mod_potentialSolver.f90(83,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(408,16):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_readsolver_] mod_potentialSolver.f90:408

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4 zmm16]
        
    Routine temporaries
        Total         :    1254
            Global    :     139
            Local     :    1115
        Regenerable   :     410
        Spilled       :      13
        
    Routine stack
        Variables     :    1944 bytes*
            Reads     :      83 [2.97e+00 ~ 3.0%]
            Writes    :     214 [9.89e+00 ~ 9.9%]
        Spills        :      64 bytes*
            Reads     :      11 [3.35e-01 ~ 0.3%]
            Writes    :      11 [3.79e-01 ~ 0.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: READCHARGEDPARTICLEINPUTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (READCHARGEDPARTICLEINPUTS) [6] ../../SharedModules/src/mod_particle.f90(212,16)
  -> (304,39) MOD_PARTICLE::PARTICLE_CONSTRUCTOR
  -> (305,26) INITIALIZE_N_AVE
  -> (306,26) GENERATE3DMAXWELLIAN
  -> (307,26) INITIALIZERANDUNIFORM
  -> (309,39) MOD_PARTICLE::PARTICLE_CONSTRUCTOR
  -> (333,50) GETKEAVE


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(237,21)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(247,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(251,21)
      remark #15523: loop was not vectorized: loop control variable NUMSPECIES was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(271,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(272,17)
      remark #15524: loop was not vectorized: search loop cannot be vectorized unless all memory references can be aligned vector load
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(284,17)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(301,13)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(302,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(318,21)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,25)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,25)
            remark #25399: memcopy generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,25)
               remark #15300: LOOP WAS VECTORIZED
               remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
            LOOP END

            LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,25)
            <Remainder loop for vectorization>
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            LOOP END
         LOOP END
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,48)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,48)
            remark #25399: memcopy generated
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,48)
               remark #15300: LOOP WAS VECTORIZED
               remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
            LOOP END

            LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(324,48)
            <Remainder loop for vectorization>
               remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
            LOOP END
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(329,58)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(329,58)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(329,58)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(301,13):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (1, 0)
../../SharedModules/src/mod_particle.f90(324,25):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(324,48):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(212,16):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_readchargedparticleinputs_] ../../SharedModules/src/mod_particle.f90:212

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :    1381
            Global    :     280
            Local     :    1101
        Regenerable   :     629
        Spilled       :      47
        
    Routine stack
        Variables     :    8078 bytes*
            Reads     :      44 [3.76e+00 ~ 3.8%]
            Writes    :     309 [1.45e+01 ~ 14.5%]
        Spills        :     336 bytes*
            Reads     :      67 [1.82e+00 ~ 1.8%]
            Writes    :      55 [8.51e-01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GENERATE3DMAXWELLIAN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GENERATE3DMAXWELLIAN) [7] ../../SharedModules/src/mod_particle.f90(93,16)
  -> INLINE: (107,18) RAN2
  -> INLINE: (108,18) RAN2
  -> INLINE: (109,18) RAN2
  -> INLINE: (110,18) RAN2


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particle.f90(103,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(106,9)
<Peeled>
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between IRAND_THREAD (54:9) and IRAND_THREAD (55:9)
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(93,16):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_generate3dmaxwellian_] ../../SharedModules/src/mod_particle.f90:93

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     210
            Global    :      32
            Local     :     178
        Regenerable   :      43
        Spilled       :       7
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :      12 [1.64e+00 ~ 1.6%]
        Spills        :     104 bytes*
            Reads     :      20 [5.56e+00 ~ 5.6%]
            Writes    :      19 [3.81e+00 ~ 3.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_PARTICLE::PARTICLE_CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_PARTICLE::PARTICLE_CONSTRUCTOR) [8] ../../SharedModules/src/mod_particle.f90(44,29)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(55,9)
   remark #25045: Fused Loops: ( 55 56 )

   remark #25426: Loop Distributed (2 way) 
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(56,9)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(55,9)
<Distributed chunk2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(61,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(61,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(61,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(62,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(62,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(62,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(63,9)
<Peeled loop for vectorization>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(63,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(63,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(64,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(64,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(64,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(65,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(65,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(65,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(44,29):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (1, 0)
../../SharedModules/src/mod_particle.f90(50,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(61,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(62,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(64,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(65,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(44,29):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_particle_constructor_] ../../SharedModules/src/mod_particle.f90:44

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :     502
            Global    :      79
            Local     :     423
        Regenerable   :      56
        Spilled       :       7
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       6 [6.65e-01 ~ 0.7%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.16e-01 ~ 0.1%]
            Writes    :       2 [1.16e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GETKEAVE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GETKEAVE) [9] ../../SharedModules/src/mod_particle.f90(119,14)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particle.f90(125,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (127:21) and at (127:21)
   remark #25439: unrolled with remainder by 2  

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(119,14):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_getkeave_] ../../SharedModules/src/mod_particle.f90:119

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     196
            Global    :      39
            Local     :     157
        Regenerable   :      42
        Spilled       :       3
        
    Routine stack
        Variables     :      28 bytes*
            Reads     :       7 [7.37e-01 ~ 0.7%]
            Writes    :       6 [1.84e+00 ~ 1.8%]
        Spills        :      64 bytes*
            Reads     :      21 [2.18e+00 ~ 2.2%]
            Writes    :      18 [4.76e+00 ~ 4.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: READNEUTRALPARTICLEINPUTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (READNEUTRALPARTICLEINPUTS) [10] ../../SharedModules/src/mod_targetParticle.f90(60,16)
  -> INLINE: (119,41) MOD_TARGETPARTICLE::TARGETPARTICLE_CONSTRUCTOR


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(71,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(76,21)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(80,21)
      remark #15523: loop was not vectorized: loop control variable NUMNEUTRAL was found, but loop iteration count cannot be computed before executing the loop
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(99,13)
   remark #15523: loop was not vectorized: loop control variable NUMNEUTRAL was found, but loop iteration count cannot be computed before executing the loop

   LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(100,17)
      remark #15524: loop was not vectorized: search loop cannot be vectorized unless all memory references can be aligned vector load
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(117,13)
<Distributed chunk1>
   remark #25426: Loop Distributed (2 way) 
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(117,13)
<Distributed chunk2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(117,13)
<Remainder, Distributed chunk2>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_targetParticle.f90(118,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (119:17) and at (32:9)
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_targetParticle.f90(32,9):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (8, 0), and destination (alignment, offset): (1, 0)
../../SharedModules/src/mod_targetParticle.f90(60,16):remark #34051: REGISTER ALLOCATION : [mod_targetparticle_mp_readneutralparticleinputs_] ../../SharedModules/src/mod_targetParticle.f90:60

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     691
            Global    :     147
            Local     :     544
        Regenerable   :     296
        Spilled       :      24
        
    Routine stack
        Variables     :    4094 bytes*
            Reads     :      29 [2.43e+00 ~ 2.4%]
            Writes    :     120 [1.71e+01 ~ 17.1%]
        Spills        :     144 bytes*
            Reads     :      25 [7.46e+00 ~ 7.5%]
            Writes    :      22 [1.04e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: READNULLCOLLISIONINPUTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (READNULLCOLLISIONINPUTS) [11] ../../SharedModules/src/mod_NullCollision.f90(601,16)
  -> (775,22) INDEXSORTARRAY
  -> (834,40) MOD_NULLCOLLISION::NULLCOLLISION_CONSTRUCTOR


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(624,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(631,17)
      remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(664,41)
         remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
         remark #15346: vector dependence: assumed ANTI dependence between PARTICLELIST(J) (657:62) and fa4 (687:37)

         LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(656,33)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../../SharedModules/src/mod_NullCollision.f90(662,33) ]
         LOOP END

         LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(663,33)
            remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../../SharedModules/src/mod_NullCollision.f90(669,33) ]
         LOOP END
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(697,25)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../../SharedModules/src/mod_NullCollision.f90(699,33) ]
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(724,25)
         remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(728,25)
         remark #15523: loop was not vectorized: loop control variable I was found, but loop iteration count cannot be computed before executing the loop
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(706,29)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 2  
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(752,13)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(759,17)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_NullCollision.f90(761,25) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(759,17)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(767,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(769,25)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(769,25)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(769,25)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(778,17)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(778,17)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(788,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between E_CONCATENATE(K) (791:25) and E_CONCATENATE(K) (792:25)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(788,17)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(800,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between PRODUCTSINDXARRAY(:,H) (806:25) and PRODUCTSINDXARRAY(:,H) (806:25)

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(809,25)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between LOWERINDX (810:48) and LOWERINDX (816:37)

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(815,33)
         remark #15523: loop was not vectorized: loop control variable LOWERINDX was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 2  
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(806,25)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(848,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (849:21) and at (858:25)
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(862,13)
   remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_NullCollision.f90(610,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (16, 0), and destination (alignment, offset): (16, 0)
../../SharedModules/src/mod_NullCollision.f90(615,100):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(615,76):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(615,53):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(615,40):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(614,104):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(614,79):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(614,61):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(614,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(625,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_NullCollision.f90(752,13):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (1, 0)
../../SharedModules/src/mod_NullCollision.f90(769,25):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_NullCollision.f90(601,16):remark #34051: REGISTER ALLOCATION : [mod_nullcollision_mp_readnullcollisioninputs_] ../../SharedModules/src/mod_NullCollision.f90:601

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   37[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm18 k1-k4]
        
    Routine temporaries
        Total         :    2507
            Global    :     422
            Local     :    2085
        Regenerable   :     736
        Spilled       :      68
        
    Routine stack
        Variables     :   1571412 bytes*
            Reads     :     131 [1.38e-01 ~ 0.1%]
            Writes    :     354 [7.97e-02 ~ 0.1%]
        Spills        :     504 bytes*
            Reads     :     165 [1.33e-01 ~ 0.1%]
            Writes    :     110 [4.65e-02 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INDEXSORTARRAY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INDEXSORTARRAY) [12] ../../SharedModules/src/mod_BasicFunctions.f90(315,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(328,11)
<Peeled loop for vectorization>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(328,11)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(328,11)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(333,11)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(372,14)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(375,29)
         remark #15523: loop was not vectorized: loop control variable J was found, but loop iteration count cannot be computed before executing the loop
         remark #25478: While Loop Unrolled by 2  
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(335,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between INDX(J) (336:17) and INDX(I+1) (343:17)

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(338,17)
         remark #15520: loop was not vectorized: loop with multiple exits cannot be vectorized unless it meets search loop idiom criteria   [ ../../SharedModules/src/mod_BasicFunctions.f90(341,17) ]
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(315,16):remark #34051: REGISTER ALLOCATION : [mod_basicfunctions_mp_indexsortarray_] ../../SharedModules/src/mod_BasicFunctions.f90:315

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     128
            Global    :      65
            Local     :      63
        Regenerable   :      21
        Spilled       :      14
        
    Routine stack
        Variables     :     280 bytes*
            Reads     :       2 [2.47e-01 ~ 0.2%]
            Writes    :       7 [2.52e-01 ~ 0.3%]
        Spills        :     112 bytes*
            Reads     :      19 [3.23e+00 ~ 3.2%]
            Writes    :      17 [1.49e+00 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_NULLCOLLISION::NULLCOLLISION_CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_NULLCOLLISION::NULLCOLLISION_CONSTRUCTOR) [13] ../../SharedModules/src/mod_NullCollision.f90(39,34)
  -> (64,14) INDEXSORTARRAY


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(57,9)
   remark #25461: Imperfect Loop Unroll-Jammed by 2   (pre-vector) 
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(59,13)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(59,13)
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ ../../SharedModules/src/mod_NullCollision.f90(61,17) ]
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ ../../SharedModules/src/mod_NullCollision.f90(61,17) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(59,13)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(57,9)
<Remainder>
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(59,13)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(59,13)
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ ../../SharedModules/src/mod_NullCollision.f90(61,17) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(59,13)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(66,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between INDXORDER(I) (67:13) and INDXORDER(?-I+1) (69:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(66,9)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(75,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(75,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(75,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(76,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(77,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(80,13)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(80,13)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(80,13)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(84,13)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(89,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_NullCollision.f90(95,13) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(92,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(92,13)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(98,26)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(98,26)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_NullCollision.f90(98,26) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(98,26)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(98,26)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(99,26)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(99,26)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_NullCollision.f90(99,26) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(99,26)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(99,26)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_NullCollision.f90(39,34):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (1, 0)
../../SharedModules/src/mod_NullCollision.f90(75,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_NullCollision.f90(80,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_NullCollision.f90(39,34):remark #34051: REGISTER ALLOCATION : [mod_nullcollision_mp_nullcollision_constructor_] ../../SharedModules/src/mod_NullCollision.f90:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   40[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm25 k1]
        
    Routine temporaries
        Total         :     959
            Global    :     221
            Local     :     738
        Regenerable   :      66
        Spilled       :      53
        
    Routine stack
        Variables     :     896 bytes*
            Reads     :      28 [3.42e-01 ~ 0.3%]
            Writes    :      58 [7.70e-01 ~ 0.8%]
        Spills        :     384 bytes*
            Reads     :      87 [3.73e+00 ~ 3.7%]
            Writes    :      54 [8.53e-01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: READINJECTIONINPUTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (READINJECTIONINPUTS) [14] ../../SharedModules/src/mod_particleInjection.f90(184,16)


    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particleInjection.f90(184,16):remark #34051: REGISTER ALLOCATION : [mod_particleinjection_mp_readinjectioninputs_] ../../SharedModules/src/mod_particleInjection.f90:184

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm1 zmm16-zmm19]
        
    Routine temporaries
        Total         :     520
            Global    :      58
            Local     :     462
        Regenerable   :     369
        Spilled       :      11
        
    Routine stack
        Variables     :     876 bytes*
            Reads     :       9 [1.48e+00 ~ 1.5%]
            Writes    :     121 [2.08e+01 ~ 20.8%]
        Spills        :      48 bytes*
            Reads     :       7 [7.24e-01 ~ 0.7%]
            Writes    :       6 [5.99e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SOLVESIMULATION

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SOLVESIMULATION) [15] ../../SharedModules/src/mod_simulation.f90(299,16)
  -> (320,14) MOD_SIMULATION::GENERATESAVEDIRECTORY
  -> (331,14) WRITEPARTICLEINJECTIONINPUTS
  -> INLINE: (363,14) LOADPARTICLEDENSITY
    -> INLINE: mod_Scheme.f90:(79,18) MOD_SCHEME::INTERPOLATEPARTICLETONODES
  -> CP_CLONE (364,14) WRITEPARTICLEDENSITY..1
  -> CP_CLONE (365,14) MOD_SIMULATION::WRITEPHI..1
  -> (366,14) WRITEDOMAIN
  -> (368,18) WRITELOCALTEMPERATURE
  -> (380,22) SOLVEPOTENTIAL
  -> (385,34) MAXWELLIANHEATING
  -> (386,38) ADDMAXWELLIANLOSTPARTICLES
  -> (387,37) REFLUXPARTICLES
  -> (388,36) INJECTATBOUNDARY
  -> (389,43) INJECTUNIFORMFLUX
  -> (391,26) GENERATECOLLISION
  -> INLINE: (401,35) GETTOTALKE
  -> (403,22) DEPOSITRHO
  -> (405,22) SOLVEPOTENTIAL
  -> CP_CLONE (407,24) MOD_POTENTIALSOLVER^GETTOTALPE..0
  -> INLINE: (410,35) GETTOTALKE
  -> CP_CLONE (412,24) MOD_POTENTIALSOLVER^GETTOTALPE..1
  -> INLINE: (412,59) MOD_POTENTIALSOLVER^GETENERGYFROMBOUNDARY
  -> (418,34) MAXWELLIANHEATING
  -> (419,38) ADDMAXWELLIANLOSTPARTICLES
  -> (420,37) REFLUXPARTICLES
  -> (421,36) INJECTATBOUNDARY
  -> (422,43) INJECTUNIFORMFLUX
  -> (424,26) GENERATECOLLISION
  -> INLINE: (428,22) LOADPARTICLEDENSITY
    -> INLINE: mod_Scheme.f90:(79,18) MOD_SCHEME::INTERPOLATEPARTICLETONODES
  -> CP_CLONE (429,22) WRITEPARTICLEDENSITY..1
  -> CP_CLONE (430,22) MOD_SIMULATION::WRITEPHI..1
  -> (431,22) DEPOSITRHO
  -> (434,31) MOD_POTENTIALSOLVER^GETCHARGECONTINUITYERROR
  -> (437,30) MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_POISSON
  -> CP_CLONE (454,26) MOD_POTENTIALSOLVER^GETTOTALPE..0
  -> (458,26) WRITELOCALTEMPERATURE
  -> (459,26) WRITEPHASESPACE
  -> INLINE: (461,39) GETTOTALKE
  -> INLINE: (467,25) GETKEAVE
  -> INLINE: (501,27) GETTOTALKE
  -> (503,14) DEPOSITRHO
  -> (505,14) SOLVEPOTENTIAL
  -> CP_CLONE (507,16) MOD_POTENTIALSOLVER^GETTOTALPE..0
  -> INLINE: (510,27) GETTOTALKE
  -> CP_CLONE (512,16) MOD_POTENTIALSOLVER^GETTOTALPE..1
  -> (512,51) MOD_POTENTIALSOLVER^GETENERGYFROMBOUNDARY
  -> (518,26) MAXWELLIANHEATING
  -> (519,30) ADDMAXWELLIANLOSTPARTICLES
  -> (520,29) REFLUXPARTICLES
  -> (521,28) INJECTATBOUNDARY
  -> (522,35) INJECTUNIFORMFLUX
  -> (524,18) GENERATECOLLISION
  -> INLINE: (528,14) LOADPARTICLEDENSITY
    -> INLINE: mod_Scheme.f90:(79,18) MOD_SCHEME::INTERPOLATEPARTICLETONODES
  -> CP_CLONE (529,14) WRITEPARTICLEDENSITY..1
  -> CP_CLONE (530,14) MOD_SIMULATION::WRITEPHI..1
  -> (531,14) DEPOSITRHO
  -> (533,23) MOD_POTENTIALSOLVER^GETCHARGECONTINUITYERROR
  -> (536,22) MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_POISSON
  -> CP_CLONE (553,18) MOD_POTENTIALSOLVER^GETTOTALPE..0
  -> (557,18) WRITELOCALTEMPERATURE
  -> (558,18) WRITEPHASESPACE
  -> (560,31) GETTOTALKE
  -> INLINE: (566,17) GETKEAVE


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at mod_Scheme.f90(74,19) inlined into ../../SharedModules/src/mod_simulation.f90(363,14)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particle.f90(150,15) inlined into ../../SharedModules/src/mod_simulation.f90(401,35)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particle.f90(150,15) inlined into ../../SharedModules/src/mod_simulation.f90(410,35)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at mod_Scheme.f90(74,19) inlined into ../../SharedModules/src/mod_simulation.f90(428,22)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particle.f90(150,15) inlined into ../../SharedModules/src/mod_simulation.f90(461,39)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particle.f90(125,15) inlined into ../../SharedModules/src/mod_simulation.f90(467,25)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particle.f90(150,15) inlined into ../../SharedModules/src/mod_simulation.f90(501,27)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particle.f90(150,15) inlined into ../../SharedModules/src/mod_simulation.f90(510,27)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at mod_Scheme.f90(74,19) inlined into ../../SharedModules/src/mod_simulation.f90(528,14)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particle.f90(125,15) inlined into ../../SharedModules/src/mod_simulation.f90(566,17)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(336,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (337:13) and at (337:13)
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(343,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (344:13) and at (344:13)
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(349,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (352:94) and at (352:13)

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(350,13)
      remark #25045: Fused Loops: ( 350 351 )

      remark #25436: completely unrolled by 2   (pre-vector) 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(351,13)
      remark #25046: Loop lost in Fusion 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(356,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(356,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(356,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(363,14)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(367,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between PARTICLELIST(J) (368:18) and at (368:18)
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(377,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(390,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (391:26) and at (391:26)
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(400,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (401:35) and at (401:35)
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(410,35)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(410,66)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(410,66)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(410,66)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(410,66)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(423,17)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (424:26) and at (424:26)
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(428,22)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(457,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(466,155)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(466,155)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(466,155)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47) inlined into ../../SharedModules/src/mod_simulation.f90(467,25)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47) inlined into ../../SharedModules/src/mod_simulation.f90(467,25)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47) inlined into ../../SharedModules/src/mod_simulation.f90(467,25)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(468,21)
         remark #25045: Fused Loops: ( 468 469 )

         remark #25426: Loop Distributed (2 way) 
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 2  
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(469,21)
         remark #25046: Loop lost in Fusion 
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(468,21)
      <Distributed chunk2>
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 2  
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(460,49)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 2  
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(462,47)
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25436: completely unrolled by 2  
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(471,17)
      remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(472,21) ]
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
      remark #25457: Number of partial sums replaced: 1
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(471,17)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(477,17)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(477,17)
   <Remainder>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(485,17)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(485,17)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(485,17)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(486,53)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(486,53)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(486,53)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(487,48)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(487,48)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(487,48)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(500,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (501:27) and at (501:27)
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(510,27)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(510,58)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(510,58)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(510,58)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(510,58)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(523,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (524:18) and at (524:18)
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(528,14)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(556,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(565,146)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(565,146)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(565,146)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47) inlined into ../../SharedModules/src/mod_simulation.f90(566,17)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47) inlined into ../../SharedModules/src/mod_simulation.f90(566,17)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(129,47) inlined into ../../SharedModules/src/mod_simulation.f90(566,17)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(559,41)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25436: completely unrolled by 2  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(561,39)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25436: completely unrolled by 2  
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(569,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(570,13) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25457: Number of partial sums replaced: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(569,9)
<Remainder>
LOOP END

LOOP BEGIN at mod_Scheme.f90(77,17) inlined into ../../SharedModules/src/mod_simulation.f90(363,14)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at mod_Scheme.f90(58,9) inlined into ../../SharedModules/src/mod_simulation.f90(363,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(401,35)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (152:21) and at (152:21)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 6

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(401,35)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(401,35)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(410,35)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (152:21) and at (152:21)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 6

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(410,35)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(410,35)
<Remainder>
LOOP END

LOOP BEGIN at mod_Scheme.f90(77,17) inlined into ../../SharedModules/src/mod_simulation.f90(428,22)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at mod_Scheme.f90(58,9) inlined into ../../SharedModules/src/mod_simulation.f90(428,22)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(461,39)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (152:21) and at (152:21)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 6

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(461,39)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(461,39)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21) inlined into ../../SharedModules/src/mod_simulation.f90(467,25)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (127:21) and at (127:21)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 6

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21) inlined into ../../SharedModules/src/mod_simulation.f90(467,25)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21) inlined into ../../SharedModules/src/mod_simulation.f90(467,25)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(501,27)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (152:21) and at (152:21)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 6

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(501,27)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(501,27)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(510,27)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (152:21) and at (152:21)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 6

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(510,27)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21) inlined into ../../SharedModules/src/mod_simulation.f90(510,27)
<Remainder>
LOOP END

LOOP BEGIN at mod_Scheme.f90(77,17) inlined into ../../SharedModules/src/mod_simulation.f90(528,14)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at mod_Scheme.f90(58,9) inlined into ../../SharedModules/src/mod_simulation.f90(528,14)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21) inlined into ../../SharedModules/src/mod_simulation.f90(566,17)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (127:21) and at (127:21)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 6

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21) inlined into ../../SharedModules/src/mod_simulation.f90(566,17)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(127,21) inlined into ../../SharedModules/src/mod_simulation.f90(566,17)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_simulation.f90(356,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(485,17):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(299,16):remark #34051: REGISTER ALLOCATION : [mod_simulation_mp_solvesimulation_] ../../SharedModules/src/mod_simulation.f90:299

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   33[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm19]
        
    Routine temporaries
        Total         :    3897
            Global    :     797
            Local     :    3100
        Regenerable   :    1475
        Spilled       :     140
        
    Routine stack
        Variables     :    6332 bytes*
            Reads     :     166 [1.68e+00 ~ 1.7%]
            Writes    :     736 [9.60e+00 ~ 9.6%]
        Spills        :    1096 bytes*
            Reads     :     322 [2.48e+00 ~ 2.5%]
            Writes    :     258 [3.48e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GENERATECOLLISION

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GENERATECOLLISION) [16] ../../SharedModules/src/mod_NullCollision.f90(103,16)
  -> INLINE: (132,16) RAN2
  -> INLINE: (136,20) RAN2
  -> INLINE: (140,30) GENERATE3DMAXWELLIANVELOCITY
    -> INLINE: ../../SharedModules/src/mod_targetParticle.f90:(49,14) RAN2
    -> INLINE: ../../SharedModules/src/mod_targetParticle.f90:(50,14) RAN2
    -> INLINE: ../../SharedModules/src/mod_targetParticle.f90:(51,14) RAN2
    -> INLINE: ../../SharedModules/src/mod_targetParticle.f90:(52,14) RAN2
  -> INLINE: (168,20) RAN2
  -> INDIRECT-: (*((P64*) *((P64*) (mod_nullcollision_mp_generatecollision_$SELF_V$8fe.8.51 + 56(SI64)))))[2(SI64)]
     -tbp-> ELASTICEXCITCOLLISIONISOTROPIC
      -> INLINE: (180,34) ELASTICEXCITCOLLISIONISOTROPIC
        -> INLINE: (517,35) RAN2
        -> INLINE: (518,15) RAN2
  -> INDIRECT-: (*((P64*) *((P64*) (mod_nullcollision_mp_generatecollision_$SELF_V$8fe.8.51 + 56(SI64)))))[3(SI64)]
     -tbp-> IONIZATIONCOLLISIONISOTROPIC
      -> INLINE: (185,34) IONIZATIONCOLLISIONISOTROPIC
        -> INLINE: (366,35) RAN2
        -> INLINE: (367,15) RAN2
        -> INLINE: (379,15) RAN2
        -> (381,14) MOD_NULLCOLLISION::SCATTERVECTOR
  -> INDIRECT-: (*((P64*) *((P64*) (mod_nullcollision_mp_generatecollision_$SELF_V$8fe.8.51 + 56(SI64)))))[2(SI64)]
     -tbp-> ELASTICEXCITCOLLISIONISOTROPIC
      -> INLINE: (199,34) ELASTICEXCITCOLLISIONISOTROPIC
        -> INLINE: (517,35) RAN2
        -> INLINE: (518,15) RAN2


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_NullCollision.f90(125,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(139,13)
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(141,13)
   remark #25045: Fused Loops: ( 141 142 143 )

   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(142,28)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(143,24)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(155,17)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(204,79)
   remark #25045: Fused Loops: ( 204 204 205 )

   remark #25427: Loop Statements Reordered
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(204,106)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(205,29)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(198,29)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(198,29)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(512,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(199,34)
   remark #25045: Fused Loops: ( 512 514 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(514,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(199,34)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(512,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(199,34)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(526,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(199,34)
   remark #25045: Fused Loops: ( 526 530 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(530,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(199,34)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(526,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(199,34)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(201,79)
   remark #25045: Fused Loops: ( 201 201 )

   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(201,101)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(184,55)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(361,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(185,34)
   remark #25045: Fused Loops: ( 361 363 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(363,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(185,34)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(375,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(185,34)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(361,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(185,34)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(410,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(185,34)
   remark #25045: Fused Loops: ( 410 413 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(413,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(185,34)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(410,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(185,34)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(191,29)
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(194,29)
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(179,29)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(179,29)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(512,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(180,34)
   remark #25045: Fused Loops: ( 512 514 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(514,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(180,34)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(512,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(180,34)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(526,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(180,34)
   remark #25045: Fused Loops: ( 526 530 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(530,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(180,34)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(526,9) inlined into ../../SharedModules/src/mod_NullCollision.f90(180,34)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(182,79)
   remark #25045: Fused Loops: ( 182 182 )

   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(182,101)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(215,13)
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(217,13)
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(220,9)
   remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ ../../SharedModules/src/mod_NullCollision.f90(177,38) ]

   LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(213,13)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_NullCollision.f90(125,15):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (1, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_NullCollision.f90(103,16):remark #34051: REGISTER ALLOCATION : [mod_nullcollision_mp_generatecollision_] ../../SharedModules/src/mod_NullCollision.f90:103

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   43[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm28]
        
    Routine temporaries
        Total         :    1041
            Global    :     159
            Local     :     882
        Regenerable   :     157
        Spilled       :      66
        
    Routine stack
        Variables     :     740 bytes*
            Reads     :      58 [4.61e-01 ~ 0.5%]
            Writes    :     110 [4.25e+00 ~ 4.2%]
        Spills        :     576 bytes*
            Reads     :     154 [6.38e+00 ~ 6.4%]
            Writes    :     114 [4.54e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_NULLCOLLISION::SCATTERVECTOR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_NULLCOLLISION::SCATTERVECTOR) [17] ../../SharedModules/src/mod_NullCollision.f90(569,16)


    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_NullCollision.f90(569,16):remark #34051: REGISTER ALLOCATION : [mod_nullcollision_mp_scattervector_] ../../SharedModules/src/mod_NullCollision.f90:569

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rdx rcx rbx rbp rsi rdi r12 zmm0-zmm14]
        
    Routine temporaries
        Total         :      64
            Global    :      21
            Local     :      43
        Regenerable   :       1
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       8 bytes*
            Reads     :       2 [1.54e+00 ~ 1.5%]
            Writes    :       1 [1.54e+00 ~ 1.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITELOCALTEMPERATURE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WRITELOCALTEMPERATURE) [18] ../../SharedModules/src/mod_particle.f90(175,16)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particle.f90(185,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(183,9)
   remark #25420: Collapsed with loop at line 183 
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(183,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(183,9)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(183,9)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(184,9)
   remark #25420: Collapsed with loop at line 184 
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(184,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(184,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(184,9)
      remark #25421: Loop eliminated in Collapsing 

   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(195,9)
   remark #15301: OUTER LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(196,17)
      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(197,28)
      remark #25045: Fused Loops: ( 197 197 )

      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(197,53)
      remark #25046: Loop lost in Fusion 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(195,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(196,17)
      remark #25460: No loop optimizations reported
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(197,28)
      remark #25460: No loop optimizations reported
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(187,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(190,63)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(183,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(184,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(175,16):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_writelocaltemperature_] ../../SharedModules/src/mod_particle.f90:175

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm8 k0-k1]
        
    Routine temporaries
        Total         :     473
            Global    :     122
            Local     :     351
        Regenerable   :     106
        Spilled       :      16
        
    Routine stack
        Variables     :     827 bytes*
            Reads     :      30 [1.09e+00 ~ 1.1%]
            Writes    :      76 [3.84e+00 ~ 3.8%]
        Spills        :     160 bytes*
            Reads     :      27 [2.28e+00 ~ 2.3%]
            Writes    :      24 [1.60e+00 ~ 1.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITEPHASESPACE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WRITEPHASESPACE) [19] ../../SharedModules/src/mod_particle.f90(161,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(169,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(170,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(170,13)
         remark #25399: memcopy generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(170,13)
            remark #15300: LOOP WAS VECTORIZED
            remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         LOOP END

         LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(170,13)
         <Remainder loop for vectorization>
            remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         LOOP END
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(170,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_particle.f90(161,16):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_writephasespace_] ../../SharedModules/src/mod_particle.f90:161

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     219
            Global    :      53
            Local     :     166
        Regenerable   :      39
        Spilled       :      23
        
    Routine stack
        Variables     :     352 bytes*
            Reads     :       4 [4.88e-01 ~ 0.5%]
            Writes    :      29 [9.32e+00 ~ 9.3%]
        Spills        :     152 bytes*
            Reads     :      35 [4.74e+00 ~ 4.7%]
            Writes    :      21 [2.86e+00 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GETTOTALKE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GETTOTALKE) [20] ../../SharedModules/src/mod_particle.f90(144,14)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particle.f90(150,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between at (152:21) and at (152:21)
   remark #25439: unrolled with remainder by 2  

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21)
      remark #25436: completely unrolled by 3   (pre-vector) 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(152,21)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(144,14):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_gettotalke_] ../../SharedModules/src/mod_particle.f90:144

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm6]
        
    Routine temporaries
        Total         :     171
            Global    :      30
            Local     :     141
        Regenerable   :      42
        Spilled       :       2
        
    Routine stack
        Variables     :      28 bytes*
            Reads     :       7 [1.21e+00 ~ 1.2%]
            Writes    :       6 [3.01e+00 ~ 3.0%]
        Spills        :      64 bytes*
            Reads     :      23 [3.62e+00 ~ 3.6%]
            Writes    :      20 [8.44e+00 ~ 8.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SOLVEPOTENTIAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SOLVEPOTENTIAL) [21] ../../SharedModules/src/mod_nonLinSolvers.f90(251,16)
  -> INLINE: (259,14) MOD_POTENTIALSOLVER^RESETVOLTAGE
  -> INLINE: (262,18) MOD_NONLINSOLVERS::ADAPTIVESOLVEDIVAMPEREANDERSON
    -> (226,18) MOD_POTENTIALSOLVER^SETRFVOLTAGE
    -> (228,14) MOD_NONLINSOLVERS::SOLVEDIVAMPEREANDERSON
    -> INLINE: (243,26) MOD_POTENTIALSOLVER^SETRFVOLTAGE
    -> (245,22) MOD_NONLINSOLVERS::SOLVEDIVAMPEREANDERSON
  -> INLINE: (264,18) MOD_NONLINSOLVERS::ADAPTIVESOLVEDIVAMPEREJFNK
    -> (349,18) MOD_POTENTIALSOLVER^SETRFVOLTAGE
    -> (351,14) MOD_NONLINSOLVERS::SOLVEJFNK
    -> INLINE: (365,26) MOD_POTENTIALSOLVER^SETRFVOLTAGE
    -> (367,22) MOD_NONLINSOLVERS::SOLVEJFNK


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(378,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(259,14)
   remark #25399: memcopy generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at mod_potentialSolver.f90(378,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(259,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between SOLVER (378:9) and SOLVER(:) (378:9)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(378,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(259,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(235,13) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(262,18)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(357,13) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(264,18)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(378,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(251,16):remark #34051: REGISTER ALLOCATION : [mod_nonlinsolvers_mp_solvepotential_] ../../SharedModules/src/mod_nonLinSolvers.f90:251

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     235
            Global    :      43
            Local     :     192
        Regenerable   :      68
        Spilled       :      11
        
    Routine stack
        Variables     :     352 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      33 [3.19e+00 ~ 3.2%]
        Spills        :      40 bytes*
            Reads     :       5 [3.40e-01 ~ 0.3%]
            Writes    :       5 [2.23e-01 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^GETTOTALPE..1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^GETTOTALPE..1) [22] mod_potentialSolver.f90(338,14)
  CLONED FROM: MOD_POTENTIALSOLVER^GETTOTALPE(X,X,-1)
  -> INLINE: (346,37) ARRAYDIFF
  -> INLINE: (348,37) ARRAYDIFF


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_potentialSolver.f90(338,14):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_gettotalpe_..1] mod_potentialSolver.f90:338

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r10 r12-r13 r15 zmm0-zmm9 k1]
        
    Routine temporaries
        Total         :     272
            Global    :      79
            Local     :     193
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       4 [3.98e-01 ~ 0.4%]
            Writes    :       8 [4.08e-01 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       2 [6.74e-03 ~ 0.0%]
            Writes    :       2 [6.74e-03 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_SIMULATION::GENERATESAVEDIRECTORY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_SIMULATION::GENERATESAVEDIRECTORY) [23] ../../SharedModules/src/mod_simulation.f90(264,16)


    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_simulation.f90(264,16):remark #34051: REGISTER ALLOCATION : [mod_simulation_mp_generatesavedirectory_] ../../SharedModules/src/mod_simulation.f90:264

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r11 r13-r15]
        
    Routine temporaries
        Total         :     384
            Global    :      48
            Local     :     336
        Regenerable   :     123
        Spilled       :       5
        
    Routine stack
        Variables     :     658 bytes*
            Reads     :      23 [4.62e+00 ~ 4.6%]
            Writes    :      50 [1.47e+01 ~ 14.7%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITEPARTICLEINJECTIONINPUTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WRITEPARTICLEINJECTIONINPUTS) [24] ../../SharedModules/src/mod_particleInjection.f90(244,16)


    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particleInjection.f90(244,16):remark #34051: REGISTER ALLOCATION : [mod_particleinjection_mp_writeparticleinjectioninputs_] ../../SharedModules/src/mod_particleInjection.f90:244

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbp rsi rdi r8-r10 r12-r13]
        
    Routine temporaries
        Total         :     131
            Global    :      13
            Local     :     118
        Regenerable   :      75
        Spilled       :       3
        
    Routine stack
        Variables     :     248 bytes*
            Reads     :       2 [1.71e+00 ~ 1.7%]
            Writes    :      22 [1.79e+01 ~ 17.9%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITEDOMAIN

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WRITEDOMAIN) [25] mod_domain.f90(197,16)


    Report from: Code generation optimizations [cg]

mod_domain.f90(197,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_writedomain_] mod_domain.f90:197

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     301
            Global    :      34
            Local     :     267
        Regenerable   :     121
        Spilled       :       6
        
    Routine stack
        Variables     :     704 bytes*
            Reads     :       8 [3.15e+00 ~ 3.1%]
            Writes    :      72 [2.68e+01 ~ 26.8%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^GETENERGYFROMBOUNDARY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^GETENERGYFROMBOUNDARY) [26] mod_potentialSolver.f90(352,14)


    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(352,14):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_getenergyfromboundary_] mod_potentialSolver.f90:352

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm13]
        
    Routine temporaries
        Total         :      51
            Global    :       0
            Local     :      51
        Regenerable   :       1
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MAXWELLIANHEATING

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MAXWELLIANHEATING) [27] ../../SharedModules/src/mod_particleInjection.f90(162,16)
  -> INLINE: (173,17) RAN2
  -> INLINE: (175,22) GETMAXWELLIANSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(152,20) RAN2


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particleInjection.f90(170,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(172,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(175,22)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(54,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(175,22)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (55:9) and at (56:24)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(175,42)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particleInjection.f90(162,16):remark #34051: REGISTER ALLOCATION : [mod_particleinjection_mp_maxwellianheating_] ../../SharedModules/src/mod_particleInjection.f90:162

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7 zmm16]
        
    Routine temporaries
        Total         :     270
            Global    :      44
            Local     :     226
        Regenerable   :      45
        Spilled       :      12
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       5 [5.93e-01 ~ 0.6%]
            Writes    :      16 [2.25e+00 ~ 2.2%]
        Spills        :     144 bytes*
            Reads     :      25 [6.13e+00 ~ 6.1%]
            Writes    :      27 [5.21e+00 ~ 5.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ADDMAXWELLIANLOSTPARTICLES

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ADDMAXWELLIANLOSTPARTICLES) [28] ../../SharedModules/src/mod_particleInjection.f90(16,16)
  -> INLINE: (28,18) GETMAXWELLIANSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(152,20) RAN2
  -> INLINE: (29,18) GETMAXWELLIANFLUXSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(169,20) RAN2
  -> INLINE: (32,24) RAN2
  -> INLINE: (33,88) GETLFROMX


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particleInjection.f90(24,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(27,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mod_domain.f90(184,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(33,88)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(28,18)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(151,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(28,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between IRAND_THREAD (54:9) and IRAND_THREAD (55:9)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(28,38)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(29,18)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(168,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(29,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between IRAND_THREAD (54:9) and IRAND_THREAD (55:9)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(29,42)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(30,64)
      remark #25045: Fused Loops: ( 30 31 )

      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(31,15)
      remark #25046: Loop lost in Fusion 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particleInjection.f90(16,16):remark #34051: REGISTER ALLOCATION : [mod_particleinjection_mp_addmaxwellianlostparticles_] ../../SharedModules/src/mod_particleInjection.f90:16

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   39[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm8 zmm16-zmm30]
        
    Routine temporaries
        Total         :     603
            Global    :      93
            Local     :     510
        Regenerable   :      76
        Spilled       :      42
        
    Routine stack
        Variables     :     240 bytes*
            Reads     :       8 [5.29e-01 ~ 0.5%]
            Writes    :      23 [8.23e-01 ~ 0.8%]
        Spills        :     384 bytes*
            Reads     :      77 [9.07e+00 ~ 9.1%]
            Writes    :      69 [6.27e+00 ~ 6.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: REFLUXPARTICLES

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (REFLUXPARTICLES) [29] ../../SharedModules/src/mod_particleInjection.f90(42,16)
  -> INLINE: (55,26) GETMAXWELLIANFLUXSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(169,20) RAN2
  -> INLINE: (57,26) GETMAXWELLIANFLUXSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(169,20) RAN2


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particleInjection.f90(49,19)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(48,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(52,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(53,68)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(55,26)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(168,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(55,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between IRAND_THREAD (54:9) and IRAND_THREAD (55:9)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(55,50)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(57,26)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(168,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(57,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between IRAND_THREAD (54:9) and IRAND_THREAD (55:9)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(57,50)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(64,68)
      remark #15300: LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particleInjection.f90(42,16):remark #34051: REGISTER ALLOCATION : [mod_particleinjection_mp_refluxparticles_] ../../SharedModules/src/mod_particleInjection.f90:42

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11 zmm16-zmm19 k1]
        
    Routine temporaries
        Total         :     480
            Global    :      89
            Local     :     391
        Regenerable   :      51
        Spilled       :      27
        
    Routine stack
        Variables     :     164 bytes*
            Reads     :       9 [6.71e-01 ~ 0.7%]
            Writes    :      23 [9.81e-01 ~ 1.0%]
        Spills        :     256 bytes*
            Reads     :      46 [6.72e+00 ~ 6.7%]
            Writes    :      41 [4.49e+00 ~ 4.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INJECTATBOUNDARY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INJECTATBOUNDARY) [30] ../../SharedModules/src/mod_particleInjection.f90(71,16)
  -> INLINE: (87,26) GETMAXWELLIANFLUXSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(169,20) RAN2
  -> INLINE: (106,13) RAN2
  -> INLINE: (112,34) RAN2
  -> INLINE: (113,18) GETMAXWELLIANFLUXSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(169,20) RAN2
  -> INLINE: (120,92) GETLFROMX
  -> INLINE: (125,92) GETLFROMX


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particleInjection.f90(82,19)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_particleInjection.f90(104,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(81,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(84,13)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(87,26)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(54,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(87,26)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (55:9) and at (56:24)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(87,50)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(111,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mod_domain.f90(184,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(120,92)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at mod_domain.f90(184,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(125,92)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(113,18)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(54,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(113,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between IRAND(?+1) (55:9) and IRAND(?+1) (56:24)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(113,42)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particleInjection.f90(71,16):remark #34051: REGISTER ALLOCATION : [mod_particleinjection_mp_injectatboundary_] ../../SharedModules/src/mod_particleInjection.f90:71

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   30[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm7 zmm16-zmm22]
        
    Routine temporaries
        Total         :     874
            Global    :     164
            Local     :     710
        Regenerable   :     125
        Spilled       :      63
        
    Routine stack
        Variables     :     348 bytes*
            Reads     :      13 [4.29e-01 ~ 0.4%]
            Writes    :      32 [8.44e-01 ~ 0.8%]
        Spills        :     544 bytes*
            Reads     :     133 [1.08e+01 ~ 10.8%]
            Writes    :     109 [6.89e+00 ~ 6.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INJECTUNIFORMFLUX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INJECTUNIFORMFLUX) [31] ../../SharedModules/src/mod_particleInjection.f90(134,16)
  -> INLINE: (145,13) RAN2
  -> INLINE: (151,18) GETMAXWELLIANSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(152,20) RAN2
  -> INLINE: (152,18) GETMAXWELLIANSAMPLE
    -> INLINE: ../../SharedModules/src/mod_BasicFunctions.f90:(152,20) RAN2
  -> INLINE: (153,24) RAN2
  -> INLINE: (154,88) GETLFROMX


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particleInjection.f90(143,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(150,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at mod_domain.f90(184,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(154,88)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 2  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(151,18)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(54,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(151,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (55:9) and at (56:24)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(151,38)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(152,18)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(54,9) inlined into ../../SharedModules/src/mod_particleInjection.f90(152,18)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between at (55:9) and at (56:24)
      remark #25436: completely unrolled by 4  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particleInjection.f90(152,38)
      remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
      remark #25436: completely unrolled by 3  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particleInjection.f90(134,16):remark #34051: REGISTER ALLOCATION : [mod_particleinjection_mp_injectuniformflux_] ../../SharedModules/src/mod_particleInjection.f90:134

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   26[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm9 zmm16]
        
    Routine temporaries
        Total         :     562
            Global    :      90
            Local     :     472
        Regenerable   :      74
        Spilled       :      29
        
    Routine stack
        Variables     :     240 bytes*
            Reads     :       8 [5.79e-01 ~ 0.6%]
            Writes    :      23 [9.00e-01 ~ 0.9%]
        Spills        :     280 bytes*
            Reads     :      59 [7.20e+00 ~ 7.2%]
            Writes    :      41 [3.57e+00 ~ 3.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITEPARTICLEDENSITY..1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WRITEPARTICLEDENSITY..1) [32] mod_Scheme.f90(101,16)
  CLONED FROM: WRITEPARTICLEDENSITY(X,X,X,0,X,X)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_Scheme.f90(113,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_Scheme.f90(114,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mod_Scheme.f90(114,26)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,13)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,13)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mod_Scheme.f90(114,26):remark #34026: call to memset implemented as a call to optimized library version
mod_Scheme.f90(101,16):remark #34051: REGISTER ALLOCATION : [mod_scheme_mp_writeparticledensity_..1] mod_Scheme.f90:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm9 k1]
        
    Routine temporaries
        Total         :     342
            Global    :     101
            Local     :     241
        Regenerable   :      66
        Spilled       :      23
        
    Routine stack
        Variables     :     543 bytes*
            Reads     :       9 [2.99e-01 ~ 0.3%]
            Writes    :      42 [1.55e+00 ~ 1.5%]
        Spills        :     152 bytes*
            Reads     :      28 [2.95e+00 ~ 3.0%]
            Writes    :      21 [7.53e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_SIMULATION::WRITEPHI..1

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_SIMULATION::WRITEPHI..1) [33] ../../SharedModules/src/mod_simulation.f90(28,16)
  CLONED FROM: MOD_SIMULATION::WRITEPHI(X,X,0,X,X)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
<Peeled loop for vectorization, Multiversioned v1>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
<Multiversioned v1>
   remark #25233: Loop multiversioned for stride tests on Assumed shape arrays
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
<Remainder loop for vectorization, Multiversioned v1>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
<Peeled loop for vectorization, Multiversioned v2>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
<Multiversioned v2>
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
<Remainder loop for vectorization, Multiversioned v2>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_simulation.f90(28,16):remark #34051: REGISTER ALLOCATION : [mod_simulation_mp_writephi_..1] ../../SharedModules/src/mod_simulation.f90:28

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :     198
            Global    :      49
            Local     :     149
        Regenerable   :      58
        Spilled       :       6
        
    Routine stack
        Variables     :     367 bytes*
            Reads     :       4 [1.12e+00 ~ 1.1%]
            Writes    :      30 [1.75e+01 ~ 17.5%]
        Spills        :       8 bytes*
            Reads     :       1 [3.89e-02 ~ 0.0%]
            Writes    :       1 [2.59e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DEPOSITRHO

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DEPOSITRHO) [34] mod_Scheme.f90(84,16)
  -> INLINE: (94,18) MOD_SCHEME::INTERPOLATEPARTICLETONODES


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at mod_Scheme.f90(91,19)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_Scheme.f90(89,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_Scheme.f90(89,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(89,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_Scheme.f90(96,13)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_Scheme.f90(96,25)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mod_Scheme.f90(96,25)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(96,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(96,25)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mod_Scheme.f90(96,25)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(96,25)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(96,25)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(96,25)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(96,13)
   <Peeled loop for vectorization>
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(96,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(96,13)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at mod_Scheme.f90(93,13)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at mod_Scheme.f90(58,9) inlined into mod_Scheme.f90(94,18)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

    Report from: Code generation optimizations [cg]

mod_Scheme.f90(89,9):remark #34026: call to memset implemented as a call to optimized library version
mod_Scheme.f90(96,25):remark #34026: call to memset implemented as a call to optimized library version
mod_Scheme.f90(84,16):remark #34051: REGISTER ALLOCATION : [mod_scheme_mp_depositrho_] mod_Scheme.f90:84

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7 zmm16]
        
    Routine temporaries
        Total         :     303
            Global    :      93
            Local     :     210
        Regenerable   :      44
        Spilled       :      13
        
    Routine stack
        Variables     :     168 bytes*
            Reads     :       7 [2.99e-01 ~ 0.3%]
            Writes    :      21 [3.80e-01 ~ 0.4%]
        Spills        :     144 bytes*
            Reads     :      23 [1.93e+00 ~ 1.9%]
            Writes    :      23 [1.01e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^GETTOTALPE..0

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^GETTOTALPE..0) [35] mod_potentialSolver.f90(338,14)
  CLONED FROM: MOD_POTENTIALSOLVER^GETTOTALPE(X,X,0)
  -> INLINE: (346,37) ARRAYDIFF
  -> INLINE: (348,37) ARRAYDIFF


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_potentialSolver.f90(338,14):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_gettotalpe_..0] mod_potentialSolver.f90:338

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r10 r12-r13 r15 zmm0-zmm9 k1]
        
    Routine temporaries
        Total         :     272
            Global    :      79
            Local     :     193
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       4 [3.98e-01 ~ 0.4%]
            Writes    :       8 [4.08e-01 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       2 [6.74e-03 ~ 0.0%]
            Writes    :       2 [6.74e-03 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SOLVESIMULATIONFINALAVERAGE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SOLVESIMULATIONFINALAVERAGE) [36] ../../SharedModules/src/mod_simulation.f90(593,16)
  -> (633,18) SOLVEPOTENTIAL
  -> (635,30) MAXWELLIANHEATING
  -> (636,34) ADDMAXWELLIANLOSTPARTICLES
  -> (637,33) REFLUXPARTICLES
  -> (638,32) INJECTATBOUNDARY
  -> (639,39) INJECTUNIFORMFLUX
  -> (641,22) GENERATECOLLISION
  -> INLINE: (643,18) LOADPARTICLEDENSITY
    -> INLINE: mod_Scheme.f90:(79,18) MOD_SCHEME::INTERPOLATEPARTICLETONODES
  -> INLINE: (644,18) MOD_POTENTIALSOLVER^AVERFVOLTAGE
  -> INLINE: (672,14) MOD_POTENTIALSOLVER^AVERFVOLTAGE
  -> CP_CLONE (673,14) MOD_SIMULATION::WRITEPHI..0
  -> CP_CLONE (687,14) WRITEPARTICLEDENSITY..0
  -> (688,22) MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_POISSON
  -> (709,18) SOLVEPOTENTIAL
  -> (711,30) MAXWELLIANHEATING
  -> (712,34) ADDMAXWELLIANLOSTPARTICLES
  -> (713,33) REFLUXPARTICLES
  -> (714,32) INJECTATBOUNDARY
  -> (715,39) INJECTUNIFORMFLUX
  -> (717,22) GENERATECOLLISION


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at mod_Scheme.f90(74,19) inlined into ../../SharedModules/src/mod_simulation.f90(643,18)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED
OpenMP Construct at ../../SharedModules/src/mod_simulation.f90(667,19)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(611,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(614,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(614,13)
         remark #25408: memset generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(614,13)
            remark #15300: LOOP WAS VECTORIZED
            remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         LOOP END

         LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(614,13)
         <Remainder loop for vectorization>
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(612,13)
      remark #25045: Fused Loops: ( 612 613 )

      remark #25436: completely unrolled by 2   (pre-vector) 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(613,13)
      remark #25046: Loop lost in Fusion 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(617,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(620,9) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(617,9)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(621,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(621,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(621,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(623,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(623,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(623,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(640,13)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(643,18)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(390,13) inlined into ../../SharedModules/src/mod_simulation.f90(644,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (390:13) and SOLVER (390:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(390,13) inlined into ../../SharedModules/src/mod_simulation.f90(644,18)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(652,13)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(654,13) ]
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(653,61)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(653,61)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(653,61)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(653,61)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(657,28)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(657,28)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(657,28)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(657,28)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(658,32)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(658,32)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(658,32)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(666,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13) inlined into ../../SharedModules/src/mod_simulation.f90(672,14)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13) inlined into ../../SharedModules/src/mod_simulation.f90(672,14)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13) inlined into ../../SharedModules/src/mod_simulation.f90(672,14)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13) inlined into ../../SharedModules/src/mod_simulation.f90(672,14)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(398,13) inlined into ../../SharedModules/src/mod_simulation.f90(672,14)
   remark #25399: memcopy generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy

   LOOP BEGIN at mod_potentialSolver.f90(398,13) inlined into ../../SharedModules/src/mod_simulation.f90(672,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between SOLVER (398:13) and SOLVER(:) (398:13)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(398,13) inlined into ../../SharedModules/src/mod_simulation.f90(672,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(676,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(679,9) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(677,49)
      remark #25045: Fused Loops: ( 677 678 )

      remark #25436: completely unrolled by 2   (pre-vector) 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(678,39)
      remark #25046: Loop lost in Fusion 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(676,9)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(680,9)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(681,13) ]
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(682,9) ]
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
   remark #25457: Number of partial sums replaced: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(680,9)
<Remainder>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(683,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(683,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(683,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(684,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,39)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,13)
   <Peeled loop for vectorization>
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(685,13)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(695,46)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(695,46)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(695,46)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(695,46)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(696,57)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(697,52)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(698,54)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(699,49)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,26)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,26)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(701,26) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,26)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,26)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,48)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,48)
   remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(701,48) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,48)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(701,48)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(707,9)
   remark #25408: memset generated
   remark #15398: loop was not vectorized: loop was transformed to memset or memcpy
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(708,9)
   remark #15541: outer loop was not auto-vectorized: consider using SIMD directive

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(716,13)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(719,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed OUTPUT dependence between I (720:17) and I (723:17)

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(720,17)
         remark #25084: Preprocess Loopnests: Moving Out Store    [ ../../SharedModules/src/mod_simulation.f90(723,17) ]
         remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         remark #25439: unrolled with remainder by 2  
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(720,17)
      <Remainder>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(728,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(728,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(728,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(728,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_Scheme.f90(77,17) inlined into ../../SharedModules/src/mod_simulation.f90(643,18)
   remark #15523: loop was not vectorized: loop control variable ? was found, but loop iteration count cannot be computed before executing the loop
   remark #25478: While Loop Unrolled by 2  
LOOP END

LOOP BEGIN at mod_Scheme.f90(58,9) inlined into ../../SharedModules/src/mod_simulation.f90(643,18)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(669,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (669:13) and at (669:13)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(669,13)
<Remainder>
LOOP END


Non-optimizable loops:


LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(632,9)
   remark #15533: loop was not vectorized: loop exceeds complexity limits. Consider overriding limits (-override-limits) or using simd directive.
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_simulation.f90(608,38):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
../../SharedModules/src/mod_simulation.f90(614,13):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(621,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(623,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(398,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(683,9):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(685,39):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(707,9):remark #34000: call to memset implemented inline with stores with proven (alignment, offset): (1, 0)
../../SharedModules/src/mod_simulation.f90(593,16):remark #34051: REGISTER ALLOCATION : [mod_simulation_mp_solvesimulationfinalaverage_] ../../SharedModules/src/mod_simulation.f90:593

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm31 k1-k2]
        
    Routine temporaries
        Total         :    1971
            Global    :     432
            Local     :    1539
        Regenerable   :     468
        Spilled       :      54
        
    Routine stack
        Variables     :    2068 bytes*
            Reads     :      84 [1.59e+00 ~ 1.6%]
            Writes    :     251 [4.04e+00 ~ 4.0%]
        Spills        :     464 bytes*
            Reads     :     112 [1.40e+00 ~ 1.4%]
            Writes    :      93 [9.86e-01 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_SIMULATION::WRITEPHI..0

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_SIMULATION::WRITEPHI..0) [37] ../../SharedModules/src/mod_simulation.f90(28,16)
  CLONED FROM: MOD_SIMULATION::WRITEPHI(X,X,-1,X,X)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_simulation.f90(42,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_simulation.f90(42,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_simulation.f90(28,16):remark #34051: REGISTER ALLOCATION : [mod_simulation_mp_writephi_..0] ../../SharedModules/src/mod_simulation.f90:28

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rsi rdi r8-r10 r12-r15 zmm0]
        
    Routine temporaries
        Total         :     161
            Global    :      34
            Local     :     127
        Regenerable   :      47
        Spilled       :       5
        
    Routine stack
        Variables     :     325 bytes*
            Reads     :       4 [9.41e-01 ~ 0.9%]
            Writes    :      26 [1.60e+01 ~ 16.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITEPARTICLEDENSITY..0

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WRITEPARTICLEDENSITY..0) [38] mod_Scheme.f90(101,16)
  CLONED FROM: WRITEPARTICLEDENSITY(X,X,X,-1,X,X)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_Scheme.f90(113,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_Scheme.f90(114,26)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mod_Scheme.f90(114,26)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,26)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at mod_Scheme.f90(114,26)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,13)
   <Peeled loop for vectorization>
      remark #15301: PEEL LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_Scheme.f90(114,13)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mod_Scheme.f90(114,26):remark #34026: call to memset implemented as a call to optimized library version
mod_Scheme.f90(101,16):remark #34051: REGISTER ALLOCATION : [mod_scheme_mp_writeparticledensity_..0] mod_Scheme.f90:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm9 k1]
        
    Routine temporaries
        Total         :     328
            Global    :      96
            Local     :     232
        Regenerable   :      56
        Spilled       :      23
        
    Routine stack
        Variables     :     501 bytes*
            Reads     :       9 [2.77e-01 ~ 0.3%]
            Writes    :      38 [1.21e+00 ~ 1.2%]
        Spills        :     152 bytes*
            Reads     :      27 [2.91e+00 ~ 2.9%]
            Writes    :      21 [7.37e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^GETTOTALPE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^GETTOTALPE) [39] mod_potentialSolver.f90(338,14)
  -> INLINE: (346,37) ARRAYDIFF
  -> INLINE: (348,37) ARRAYDIFF


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(346,37)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(346,33)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(285,9) inlined into mod_potentialSolver.f90(348,37)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(348,33)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(285,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_potentialSolver.f90(338,14):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_gettotalpe_] mod_potentialSolver.f90:338

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r10 r12-r13 r15 zmm0-zmm9 k1]
        
    Routine temporaries
        Total         :     272
            Global    :      79
            Local     :     193
        Regenerable   :      20
        Spilled       :       5
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       4 [3.98e-01 ~ 0.4%]
            Writes    :       8 [4.08e-01 ~ 0.4%]
        Spills        :       8 bytes*
            Reads     :       2 [6.74e-03 ~ 0.0%]
            Writes    :       2 [6.74e-03 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^AVERFVOLTAGE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^AVERFVOLTAGE) [40] mod_potentialSolver.f90(381,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(390,13)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(390,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(390,13)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(390,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(397,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(398,13)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(398,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(398,13)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(398,13):remark #34026: call to memcpy implemented as a call to optimized library version
mod_potentialSolver.f90(381,16):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_averfvoltage_] mod_potentialSolver.f90:381

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     146
            Global    :      53
            Local     :      93
        Regenerable   :      11
        Spilled       :       5
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       8 [1.59e+00 ~ 1.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^RESETVOLTAGE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^RESETVOLTAGE) [41] mod_potentialSolver.f90(375,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(378,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(378,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(378,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(378,9):remark #34026: call to memcpy implemented as a call to optimized library version
mod_potentialSolver.f90(375,16):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_resetvoltage_] mod_potentialSolver.f90:375

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rbx rsi rdi r8-r9 r12 r15 zmm0]
        
    Routine temporaries
        Total         :      87
            Global    :      22
            Local     :      65
        Regenerable   :       6
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CONSTRUCTHALFSINEGRID

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CONSTRUCTHALFSINEGRID) [42] mod_domain.f90(96,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(106,9)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(106,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(106,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(96,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_constructhalfsinegrid_] mod_domain.f90:96

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   33[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm19 k1]
        
    Routine temporaries
        Total         :     230
            Global    :      64
            Local     :     166
        Regenerable   :      46
        Spilled       :      26
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       6 [2.86e-02 ~ 0.0%]
        Spills        :     416 bytes*
            Reads     :      38 [8.81e+00 ~ 8.8%]
            Writes    :      36 [6.79e+00 ~ 6.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CONSTRUCTSINEGRID

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CONSTRUCTSINEGRID) [43] mod_domain.f90(77,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(89,9)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(89,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(89,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(77,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_constructsinegrid_] mod_domain.f90:77

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   35[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm21 k1]
        
    Routine temporaries
        Total         :     229
            Global    :      61
            Local     :     168
        Regenerable   :      51
        Spilled       :      29
        
    Routine stack
        Variables     :     128 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      11 [7.07e-01 ~ 0.7%]
        Spills        :     432 bytes*
            Reads     :      33 [1.00e+01 ~ 10.0%]
            Writes    :      25 [6.01e+00 ~ 6.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CONSTRUCTUNIFORMGRID

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CONSTRUCTUNIFORMGRID) [44] mod_domain.f90(146,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(152,9)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(152,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(152,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(146,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_constructuniformgrid_] mod_domain.f90:146

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm13 k1]
        
    Routine temporaries
        Total         :      99
            Global    :      35
            Local     :      64
        Regenerable   :       2
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: CONSTRUCTEXPHALFGRID

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (CONSTRUCTEXPHALFGRID) [45] mod_domain.f90(118,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(136,9)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(136,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(136,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(118,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_constructexphalfgrid_] mod_domain.f90:118

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   31[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm17 k1]
        
    Routine temporaries
        Total         :     165
            Global    :      48
            Local     :     117
        Regenerable   :      32
        Spilled       :      14
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [1.22e-02 ~ 0.0%]
        Spills        :      72 bytes*
            Reads     :      11 [3.62e+00 ~ 3.6%]
            Writes    :      10 [3.46e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MAKEARRAYSFROMGRID

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MAKEARRAYSFROMGRID) [46] mod_domain.f90(157,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(160,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(160,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(160,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(160,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(163,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_domain.f90(163,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_domain.f90(163,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_domain.f90(163,9)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(161,29):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(161,29):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(164,32):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_domain.f90(164,32):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_domain.f90(157,16):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_makearraysfromgrid_] mod_domain.f90:157

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm13]
        
    Routine temporaries
        Total         :     131
            Global    :      49
            Local     :      82
        Regenerable   :       3
        Spilled       :       9
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       5 [8.48e-01 ~ 0.8%]
            Writes    :       8 [7.59e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GETLFROMX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GETLFROMX) [47] mod_domain.f90(173,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_domain.f90(184,9)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
   remark #25478: While Loop Unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

mod_domain.f90(173,14):remark #34051: REGISTER ALLOCATION : [mod_domain_mp_getlfromx_] mod_domain.f90:173

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r9 r14-r15 zmm0-zmm3]
        
    Routine temporaries
        Total         :      67
            Global    :      16
            Local     :      51
        Regenerable   :      19
        Spilled       :       5
        
    Routine stack
        Variables     :      80 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       3 [3.37e-01 ~ 0.3%]
        Spills        :       8 bytes*
            Reads     :       1 [1.12e-01 ~ 0.1%]
            Writes    :       1 [1.12e-01 ~ 0.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: GETTOTALMOMENTUM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GETTOTALMOMENTUM) [48] ../../SharedModules/src/mod_particle.f90(132,14)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particle.f90(137,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(136,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(136,9)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(141,9)
   remark #15300: LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(137,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(137,15)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(139,24)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(139,24)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(139,24)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(139,24)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(139,24)
   <Remainder loop for vectorization>
      remark #25436: completely unrolled by 1  
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(139,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(139,9)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(137,15)
   remark #15553: loop was not vectorized: number of iterations (3) is insufficient for vectorization
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(137,15)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between (unknown,:)%%.2.256_2fast_red_tmpl.40(:) (137:15) and (unknown,:)%%.2.256_2fast_red_tmpl.40 (137:15)
   remark #25436: completely unrolled by 3  
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(132,14):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_gettotalmomentum_] ../../SharedModules/src/mod_particle.f90:132

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   20[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm5 k1]
        
    Routine temporaries
        Total         :     159
            Global    :      29
            Local     :     130
        Regenerable   :      43
        Spilled       :       1
        
    Routine stack
        Variables     :      60 bytes*
            Reads     :       9 [2.99e+00 ~ 3.0%]
            Writes    :       8 [4.48e+00 ~ 4.5%]
        Spills        :      48 bytes*
            Reads     :      13 [2.99e+00 ~ 3.0%]
            Writes    :      13 [2.99e+00 ~ 3.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: ELASTICEXCITCOLLISIONISOTROPIC

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (ELASTICEXCITCOLLISIONISOTROPIC) [49] ../../SharedModules/src/mod_NullCollision.f90(501,16)
  -> INLINE: (517,35) RAN2
  -> INLINE: (518,15) RAN2


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(512,9)
   remark #25045: Fused Loops: ( 512 514 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(514,9)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(512,9)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(526,9)
   remark #25045: Fused Loops: ( 526 530 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(530,9)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(526,9)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_NullCollision.f90(501,16):remark #34051: REGISTER ALLOCATION : [mod_nullcollision_mp_elasticexcitcollisionisotropic_] ../../SharedModules/src/mod_NullCollision.f90:501

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   37[ rax rdx rcx rsi rdi r8-r13 r15 zmm0-zmm24]
        
    Routine temporaries
        Total         :     106
            Global    :      22
            Local     :      84
        Regenerable   :       6
        Spilled       :      11
        
    Routine stack
        Variables     :      48 bytes*
            Reads     :       2 [1.41e+00 ~ 1.4%]
            Writes    :       4 [2.81e+00 ~ 2.8%]
        Spills        :      72 bytes*
            Reads     :       8 [5.63e+00 ~ 5.6%]
            Writes    :       8 [5.63e+00 ~ 5.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: IONIZATIONCOLLISIONISOTROPIC

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (IONIZATIONCOLLISIONISOTROPIC) [50] ../../SharedModules/src/mod_NullCollision.f90(349,16)
  -> INLINE: (366,35) RAN2
  -> INLINE: (367,15) RAN2
  -> INLINE: (379,15) RAN2
  -> (381,14) MOD_NULLCOLLISION::SCATTERVECTOR


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(361,9)
   remark #25045: Fused Loops: ( 361 363 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(363,9)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(375,9)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 3  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(361,9)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(410,9)
   remark #25045: Fused Loops: ( 410 413 )

   remark #15301: FUSED LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 1
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(413,9)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_NullCollision.f90(410,9)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 1  
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_NullCollision.f90(349,16):remark #34051: REGISTER ALLOCATION : [mod_nullcollision_mp_ionizationcollisionisotropic_] ../../SharedModules/src/mod_NullCollision.f90:349

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   34[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm19]
        
    Routine temporaries
        Total         :     148
            Global    :      30
            Local     :     118
        Regenerable   :      20
        Spilled       :      15
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :       6 [3.01e+00 ~ 3.0%]
            Writes    :       9 [4.52e+00 ~ 4.5%]
        Spills        :      88 bytes*
            Reads     :      12 [6.03e+00 ~ 6.0%]
            Writes    :      10 [5.02e+00 ~ 5.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITECOLLISIONCROSSSECTION

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (WRITECOLLISIONCROSSSECTION) [51] ../../SharedModules/src/mod_NullCollision.f90(554,16)


    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_NullCollision.f90(554,16):remark #34051: REGISTER ALLOCATION : [mod_nullcollision_mp_writecollisioncrosssection_] ../../SharedModules/src/mod_NullCollision.f90:554

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rbp rsi rdi r8-r15]
        
    Routine temporaries
        Total         :     165
            Global    :      27
            Local     :     138
        Regenerable   :      63
        Spilled       :       8
        
    Routine stack
        Variables     :     480 bytes*
            Reads     :       4 [2.49e+00 ~ 2.5%]
            Writes    :      48 [2.87e+01 ~ 28.7%]
        Spills        :      16 bytes*
            Reads     :       2 [6.44e-01 ~ 0.6%]
            Writes    :       2 [1.25e+00 ~ 1.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: WRITEPARTICLEDENSITY

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (WRITEPARTICLEDENSITY) mod_Scheme.f90(101,16)

===========================================================================

Begin optimization report for: LOADPARTICLEDENSITY

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (LOADPARTICLEDENSITY) mod_Scheme.f90(68,16)

===========================================================================

Begin optimization report for: MOD_SCHEME::INTERPOLATEPARTICLETONODES

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_SCHEME::INTERPOLATEPARTICLETONODES) mod_Scheme.f90(50,16)

===========================================================================

Begin optimization report for: MOD_SIMULATION::WRITEPHI

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_SIMULATION::WRITEPHI) ../../SharedModules/src/mod_simulation.f90(28,16)

===========================================================================

Begin optimization report for: mod_simulation._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_simulation._) ../../SharedModules/src/mod_simulation.f90(1,8)

===========================================================================

Begin optimization report for: SOLVE_TRIDIAG

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (SOLVE_TRIDIAG) ../../SharedModules/src/mod_BasicFunctions.f90(180,16)

===========================================================================

Begin optimization report for: MOD_NONLINSOLVERS::ADAPTIVESOLVEDIVAMPEREJFNK

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_NONLINSOLVERS::ADAPTIVESOLVEDIVAMPEREJFNK) ../../SharedModules/src/mod_nonLinSolvers.f90(340,16)

===========================================================================

Begin optimization report for: MOD_NONLINSOLVERS::SOLVEJFNK

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_NONLINSOLVERS::SOLVEJFNK) [59] ../../SharedModules/src/mod_nonLinSolvers.f90(313,16)
  -> INLINE: (323,14) MOD_NONLINSOLVERS::FUNCNITSOL
    -> (281,14) DEPOSITJ
    -> (284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> (326,14) NITSOL
  -> (330,18) MOVEPARTICLES


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(322,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(322,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(322,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(323,14)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(323,14)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(323,14)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(323,14)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(323,14)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(323,14)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(323,14)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(322,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(313,16):remark #34051: REGISTER ALLOCATION : [mod_nonlinsolvers_mp_solvejfnk_] ../../SharedModules/src/mod_nonLinSolvers.f90:313

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :     316
            Global    :      62
            Local     :     254
        Regenerable   :      83
        Spilled       :       9
        
    Routine stack
        Variables     :     828 bytes*
            Reads     :      14 [1.76e+00 ~ 1.8%]
            Writes    :      72 [9.61e+00 ~ 9.6%]
        Spills        :      40 bytes*
            Reads     :       5 [7.30e-01 ~ 0.7%]
            Writes    :       5 [8.42e-01 ~ 0.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NITSOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NITSOL) [60] nitsol.f(1,18)
  -> DELETED: (461,26) for_open
  -> INLINE: (585,12) NITDRV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
        -> INLINE: nitdrv.f:(434,12) MOD_NONLINSOLVERS::FUNCNITSOL
          -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
          -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
   -> INDIRECT: raddr(dnrm2_)(P64)
       -gpt-> dnrm2_
    -> nitdrv.f:(519,15) NITGM
    -> nitdrv.f:(536,15) NITSTB
    -> nitdrv.f:(556,15) NITTFQ
   -> INDIRECT: raddr(ddot_)(P64)
       -gpt-> ddot_
    -> nitdrv.f:(603,12) NITBT
   -> INDIRECT: raddr(dnrm2_)(P64)
       -gpt-> dnrm2_
  -> DELETED: (603,28) for_close


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitsol.f(1037,12)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitsol.f(1037,12)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitsol.f(1037,12)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitsol.f(1037,12)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitsol.f(1037,12)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitsol.f(1037,12)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitsol.f(1037,12)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nitdrv.f(655,13) inlined into nitsol.f(1037,12)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
nitsol.f(1,18):remark #34051: REGISTER ALLOCATION : [nitsol_] nitsol.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm9 zmm16-zmm18]
        
    Routine temporaries
        Total         :     572
            Global    :     107
            Local     :     465
        Regenerable   :     256
        Spilled       :      39
        
    Routine stack
        Variables     :     640 bytes*
            Reads     :      48 [4.71e-01 ~ 0.5%]
            Writes    :      89 [3.84e+00 ~ 3.8%]
        Spills        :     272 bytes*
            Reads     :      83 [1.32e+00 ~ 1.3%]
            Writes    :      87 [1.77e+00 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOVEPARTICLES

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOVEPARTICLES) [61] mod_particleMover.f90(216,16)
  -> INLINE: (258,26) MOD_PARTICLEMOVER::PARTICLESUBSTEPNOBFIELD


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at mod_particleMover.f90(234,19)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_particleMover.f90(226,9)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_particleMover.f90(226,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_particleMover.f90(226,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_particleMover.f90(229,42)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_particleMover.f90(327,73)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(327,73)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(327,73)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(327,100)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(327,100)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(327,100)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(329,13)
      remark #25045: Fused Loops: ( 329 330 )

      remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #25436: completely unrolled by 2  
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(330,13)
      remark #25046: Loop lost in Fusion 
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(331,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between at (331:13) and at (331:13)
      remark #25436: completely unrolled by 2  
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(332,13)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed FLOW dependence between at (332:13) and at (332:13)
      remark #25436: completely unrolled by 2  
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(232,13)
      remark #25045: Fused Loops: ( 232 233 )

      remark #25426: Loop Distributed (2 way) 
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(233,13)
      remark #25046: Loop lost in Fusion 
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(232,13)
   <Distributed chunk2>
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
   remark #25045: Fused Loops: ( 234 234 )

   remark #25426: Loop Distributed (2 way) 
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
<Distributed chunk2>
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_particleMover.f90(270,75)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mod_particleMover.f90(275,75)
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mod_particleMover.f90(320,21)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between PARTICLELIST(J,:,I-DELIDX,?+1) (320:21) and PARTICLELIST(J) (320:21)
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
   remark #25045: Fused Loops: ( 234 234 )

   remark #25426: Loop Distributed (2 way) 
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
   remark #25046: Loop lost in Fusion 
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
<Distributed chunk2>
   remark #15335: loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
   remark #25045: Fused Loops: ( 234 234 )

   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between (unknown,:)%%.2.262_2fast_red_tmpl.94(:) (234:19) and (unknown,:)%%.2.262_2fast_red_tmpl.94 (234:19)
   remark #25436: completely unrolled by 2  
LOOP END

LOOP BEGIN at mod_particleMover.f90(234,19)
   remark #25046: Loop lost in Fusion 
LOOP END


Non-optimizable loops:


LOOP BEGIN at mod_particleMover.f90(322,13)
   remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ mod_particleMover.f90(264,38) ]

   LOOP BEGIN at mod_particleMover.f90(246,17)
      remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ mod_particleMover.f90(264,38) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(226,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(226,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(216,16):remark #34051: REGISTER ALLOCATION : [mod_particlemover_mp_moveparticles_] mod_particleMover.f90:216

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   40[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm24 k1]
        
    Routine temporaries
        Total         :     654
            Global    :     163
            Local     :     491
        Regenerable   :      78
        Spilled       :      25
        
    Routine stack
        Variables     :     336 bytes*
            Reads     :      23 [4.26e-01 ~ 0.4%]
            Writes    :      49 [2.34e+00 ~ 2.3%]
        Spills        :     240 bytes*
            Reads     :      58 [2.95e+00 ~ 2.9%]
            Writes    :      45 [2.65e+00 ~ 2.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^SETRFVOLTAGE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^SETRFVOLTAGE) [62] mod_potentialSolver.f90(364,16)


    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(364,16):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_setrfvoltage_] mod_potentialSolver.f90:364

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rsi rdi r13-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      35
            Global    :      12
            Local     :      23
        Regenerable   :       0
        Spilled       :       3
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_NONLINSOLVERS::ADAPTIVESOLVEDIVAMPEREANDERSON

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_NONLINSOLVERS::ADAPTIVESOLVEDIVAMPEREANDERSON) ../../SharedModules/src/mod_nonLinSolvers.f90(214,16)

===========================================================================

Begin optimization report for: MOD_NONLINSOLVERS::SOLVEDIVAMPEREANDERSON

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_NONLINSOLVERS::SOLVEDIVAMPEREANDERSON) [64] ../../SharedModules/src/mod_nonLinSolvers.f90(152,16)
  -> (164,14) DEPOSITJ
  -> (166,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> (175,18) DEPOSITJ
  -> (176,18) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> (181,22) MOVEPARTICLES
  -> (203,28) SOLVENORMALEQUATION


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(163,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(163,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(163,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(167,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(167,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(167,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(170,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(170,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(170,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(170,9)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(172,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(177,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(177,13)
      remark #25045: Fused Loops: ( 177 178 )

      remark #15301: FUSED LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(178,40)
      remark #25046: Loop lost in Fusion 
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(177,13)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(177,13)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(199,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(200,17)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(200,17)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(200,17)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(200,17)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(203,13)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(203,13)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(203,13)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(204,36)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(204,36)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(204,36)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(204,36)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(205,13)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(205,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(205,13)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(205,13)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(205,13)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(205,13)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(205,13)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(206,13)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(207,17)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(207,17)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(207,17)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(207,17)
      <Remainder loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(207,17)
         remark #25399: memcopy generated
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(207,17)
            remark #15300: LOOP WAS VECTORIZED
            remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         LOOP END

         LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(207,17)
         <Remainder loop for vectorization>
            remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
         LOOP END
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(209,13)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(209,13)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(209,13)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(163,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(167,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(203,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(205,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(207,17):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(209,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(152,16):remark #34051: REGISTER ALLOCATION : [mod_nonlinsolvers_mp_solvedivampereanderson_] ../../SharedModules/src/mod_nonLinSolvers.f90:152

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm10]
        
    Routine temporaries
        Total         :     930
            Global    :     288
            Local     :     642
        Regenerable   :      61
        Spilled       :      84
        
    Routine stack
        Variables     :    1364 bytes*
            Reads     :      15 [3.67e-01 ~ 0.4%]
            Writes    :     131 [2.41e+00 ~ 2.4%]
        Spills        :     656 bytes*
            Reads     :     196 [6.54e+00 ~ 6.5%]
            Writes    :      94 [3.29e+00 ~ 3.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SOLVENORMALEQUATION

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SOLVENORMALEQUATION) [65] ../../SharedModules/src/mod_BasicFunctions.f90(255,14)
  -> INLINE: (262,14) MOD_BASICFUNCTIONS::SOLVEGAUSSELIMINATION


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
   remark #25444: Loopnest Interchanged: ( 1 2 ) --> ( 2 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
      remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ ../../SharedModules/src/mod_BasicFunctions.f90(260,17) ]
      remark #15301: PERMUTED LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,17)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(260,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
   remark #25444: Loopnest Interchanged: ( 1 2 3 ) --> ( 2 3 1 )
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
         remark #15542: loop was not vectorized: inner loop was already vectorized

         LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
            remark #25442: blocked by 250   (pre-vector) 
            remark #25440: unrolled and jammed by 4   (pre-vector) 
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
               remark #25442: blocked by 250   (pre-vector) 
               remark #25440: unrolled and jammed by 4   (pre-vector) 
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
                  remark #25442: blocked by 256   (pre-vector) 
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
               LOOP END

               LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
               <Remainder loop for vectorization>
                  remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
                  remark #25456: Number of Array Refs Scalar Replaced In Loop: 24
               LOOP END
            LOOP END

            LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
            <Remainder>
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
                  remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
               LOOP END

               LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
               <Remainder loop for vectorization>
                  remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
                  remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
               LOOP END
            LOOP END
         LOOP END

         LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
         <Remainder>
            remark #15542: loop was not vectorized: inner loop was already vectorized

            LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
               remark #15542: loop was not vectorized: inner loop was already vectorized

               LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
                  remark #25085: Preprocess Loopnests: Moving Out Load and Store    [ ../../SharedModules/src/mod_BasicFunctions.f90(261,17) ]
                  remark #15301: PERMUTED LOOP WAS VECTORIZED
                  remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
               LOOP END

               LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
               <Remainder loop for vectorization>
                  remark #15301: REMAINDER LOOP WAS VECTORIZED
               LOOP END

               LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,17)
               <Remainder loop for vectorization>
               LOOP END
            LOOP END
         LOOP END
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,9)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,9)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(261,9)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(224,9) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(226,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(226,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(226,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(226,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(230,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(232,17) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
      <Peeled loop for vectorization>
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(232,17) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(232,17) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
      <Remainder loop for vectorization>
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(232,17) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(238,9) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between B_NEW(I) (240:17) and B_NEW(J) (240:17)

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(239,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between B_NEW(I) (240:17) and B_NEW(I) (240:17)
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(239,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   <Remainder>
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(244,9) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between B_NEW(J) (246:17) and B_NEW(I) (249:13)

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(245,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
      remark #15346: vector dependence: assumed ANTI dependence between B_NEW(I) (246:17) and B_NEW(I) (246:17)
      remark #25439: unrolled with remainder by 2  
      remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(245,13) inlined into ../../SharedModules/src/mod_BasicFunctions.f90(262,14)
   <Remainder>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(260,17):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_BasicFunctions.f90(260,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_BasicFunctions.f90(261,17):remark #34026: call to memset implemented as a call to optimized library version
../../SharedModules/src/mod_BasicFunctions.f90(261,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_BasicFunctions.f90(255,14):remark #34051: REGISTER ALLOCATION : [mod_basicfunctions_mp_solvenormalequation_] ../../SharedModules/src/mod_BasicFunctions.f90:255

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   45[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     830
            Global    :     348
            Local     :     482
        Regenerable   :      24
        Spilled       :     136
        
    Routine stack
        Variables     :     216 bytes*
            Reads     :       6 [1.62e-02 ~ 0.0%]
            Writes    :      12 [2.44e-02 ~ 0.0%]
        Spills        :    1152 bytes*
            Reads     :     237 [7.65e+00 ~ 7.6%]
            Writes    :     149 [3.31e+00 ~ 3.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mod_nonlinsolvers._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_nonlinsolvers._) ../../SharedModules/src/mod_nonLinSolvers.f90(1,8)

===========================================================================

Begin optimization report for: MOD_PARTICLEMOVER::PARTICLESUBSTEPNOBFIELD

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_PARTICLEMOVER::PARTICLESUBSTEPNOBFIELD) mod_particleMover.f90(56,16)

===========================================================================

Begin optimization report for: MOD_PARTICLEMOVER::PARTICLESUBSTEPPICARD

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_PARTICLEMOVER::PARTICLESUBSTEPPICARD) mod_particleMover.f90(17,16)

===========================================================================

Begin optimization report for: mod_particlemover._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_particlemover._) mod_particleMover.f90(1,8)

===========================================================================

Begin optimization report for: ARRAYDIFF

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (ARRAYDIFF) ../../SharedModules/src/mod_BasicFunctions.f90(281,19)

===========================================================================

Begin optimization report for: TRIMUL

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (TRIMUL) ../../SharedModules/src/mod_BasicFunctions.f90(204,14)

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER::POTENTIALSOLVER_CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_POTENTIALSOLVER::POTENTIALSOLVER_CONSTRUCTOR) mod_potentialSolver.f90(44,36)

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^CONSTRUCT_DIAGMATRIX

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^CONSTRUCT_DIAGMATRIX) [73] mod_potentialSolver.f90(86,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(91,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(91,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(91,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(92,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(92,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(92,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(93,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(93,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(93,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at mod_potentialSolver.f90(124,9)
   remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ mod_potentialSolver.f90(95,26) ]
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(91,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(92,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(93,9):remark #34026: call to memset implemented as a call to optimized library version
mod_potentialSolver.f90(86,16):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_construct_diagmatrix_] mod_potentialSolver.f90:86

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r8-r9 r12-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     110
            Global    :      47
            Local     :      63
        Regenerable   :      42
        Spilled       :       7
        
    Routine stack
        Variables     :      96 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       6 [2.37e+00 ~ 2.4%]
        Spills        :      16 bytes*
            Reads     :       4 [3.60e-01 ~ 0.4%]
            Writes    :       2 [5.64e-01 ~ 0.6%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mod_potentialsolver._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_potentialsolver._) mod_potentialSolver.f90(1,8)

===========================================================================

Begin optimization report for: GETMAXWELLIANFLUXSAMPLE

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (GETMAXWELLIANFLUXSAMPLE) ../../SharedModules/src/mod_BasicFunctions.f90(160,16)

===========================================================================

Begin optimization report for: RAN2

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (RAN2) ../../SharedModules/src/mod_BasicFunctions.f90(45,14)

===========================================================================

Begin optimization report for: GETMAXWELLIANSAMPLE

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (GETMAXWELLIANSAMPLE) ../../SharedModules/src/mod_BasicFunctions.f90(143,16)

===========================================================================

Begin optimization report for: mod_particleinjection._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_particleinjection._) ../../SharedModules/src/mod_particleInjection.f90(1,8)

===========================================================================

Begin optimization report for: MOD_SCHEME::INITIALIZE_QUASINEUTRAL

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_SCHEME::INITIALIZE_QUASINEUTRAL) mod_Scheme.f90(38,16)

===========================================================================

Begin optimization report for: mod_scheme._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_scheme._) mod_Scheme.f90(1,8)

===========================================================================

Begin optimization report for: GENERATE3DMAXWELLIANVELOCITY

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (GENERATE3DMAXWELLIANVELOCITY) [81] ../../SharedModules/src/mod_targetParticle.f90(43,14)
  -> INLINE: (49,14) RAN2
  -> INLINE: (50,14) RAN2
  -> INLINE: (51,14) RAN2
  -> INLINE: (52,14) RAN2


    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_targetParticle.f90(43,14):remark #34051: REGISTER ALLOCATION : [mod_targetparticle_mp_generate3dmaxwellianvelocity_] ../../SharedModules/src/mod_targetParticle.f90:43

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbp rsi rdi r8-r13 zmm0-zmm8]
        
    Routine temporaries
        Total         :     111
            Global    :      26
            Local     :      85
        Regenerable   :       6
        Spilled       :       8
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      40 bytes*
            Reads     :       5 [3.52e+00 ~ 3.5%]
            Writes    :       5 [3.52e+00 ~ 3.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: mod_nullcollision._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_nullcollision._) ../../SharedModules/src/mod_NullCollision.f90(1,8)

===========================================================================

Begin optimization report for: MOD_TARGETPARTICLE::TARGETPARTICLE_CONSTRUCTOR

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_TARGETPARTICLE::TARGETPARTICLE_CONSTRUCTOR) ../../SharedModules/src/mod_targetParticle.f90(27,35)

===========================================================================

Begin optimization report for: mod_targetparticle._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_targetparticle._) ../../SharedModules/src/mod_targetParticle.f90(1,8)

===========================================================================

Begin optimization report for: mod_particle._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_particle._) ../../SharedModules/src/mod_particle.f90(1,8)

===========================================================================

Begin optimization report for: GETDEBYELENGTH

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (GETDEBYELENGTH) ../../SharedModules/src/mod_BasicFunctions.f90(15,19)

===========================================================================

Begin optimization report for: mod_domain._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_domain._) mod_domain.f90(1,8)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::ROTATE2D

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::ROTATE2D) ../../SharedModules/src/mod_BasicFunctions.f90(303,16)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::CROSSPRODUCT

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::CROSSPRODUCT) ../../SharedModules/src/mod_BasicFunctions.f90(295,19)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::GETARRAYMEAN1D

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::GETARRAYMEAN1D) ../../SharedModules/src/mod_BasicFunctions.f90(288,19)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::SOLVEGAUSSELIMINATION

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::SOLVEGAUSSELIMINATION) ../../SharedModules/src/mod_BasicFunctions.f90(217,16)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::GET3DMAXWELLIANVELOCITY

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::GET3DMAXWELLIANVELOCITY) ../../SharedModules/src/mod_BasicFunctions.f90(127,16)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::GETRANDOM

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::GETRANDOM) ../../SharedModules/src/mod_BasicFunctions.f90(98,16)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::RANDPCG

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::RANDPCG) ../../SharedModules/src/mod_BasicFunctions.f90(76,14)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::RANDNEW

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::RANDNEW) ../../SharedModules/src/mod_BasicFunctions.f90(60,14)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::GETMAXWELLDISTE

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::GETMAXWELLDISTE) ../../SharedModules/src/mod_BasicFunctions.f90(35,19)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::GETMAXWELLDISTVX

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::GETMAXWELLDISTVX) ../../SharedModules/src/mod_BasicFunctions.f90(27,19)

===========================================================================

Begin optimization report for: MOD_BASICFUNCTIONS::GETPLASMAFREQ

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (MOD_BASICFUNCTIONS::GETPLASMAFREQ) ../../SharedModules/src/mod_BasicFunctions.f90(21,19)

===========================================================================

Begin optimization report for: mod_basicfunctions._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (mod_basicfunctions._) ../../SharedModules/src/mod_BasicFunctions.f90(1,8)

===========================================================================

Begin optimization report for: constants._

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (constants._) ../../SharedModules/src/constants.f90(1,8)

===========================================================================

Begin optimization report for: NITDRV

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (NITDRV) nitdrv.f(1,18)

===========================================================================

Begin optimization report for: NITBT

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NITBT) [102] nitbt.f(1,18)
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (135,12) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nitbt.f(127,7)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nitbt.f(132,10)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at nitbt.f(132,10)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at nitbt.f(132,10)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at nitbt.f(132,10)
   <Remainder loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitbt.f(253,12)
      remark #25399: memcopy generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitbt.f(253,12)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitbt.f(253,12)
      <Remainder loop for vectorization>
         remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      LOOP END
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitbt.f(253,12)
   <Peeled loop for vectorization>
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitbt.f(253,12)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitbt.f(253,12)
   <Remainder loop for vectorization>
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitbt.f(253,12)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
nitbt.f(1,18):remark #34051: REGISTER ALLOCATION : [nitbt_] nitbt.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm8]
        
    Routine temporaries
        Total         :     277
            Global    :      94
            Local     :     183
        Regenerable   :     112
        Spilled       :      16
        
    Routine stack
        Variables     :     440 bytes*
            Reads     :       1 [6.14e-02 ~ 0.1%]
            Writes    :      48 [5.62e+00 ~ 5.6%]
        Spills        :     104 bytes*
            Reads     :      26 [1.50e+00 ~ 1.5%]
            Writes    :      18 [1.01e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE) [103] mod_potentialSolver.f90(189,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(196,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (199:17) and at (204:21)
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(214,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (216:13) and at (215:13)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(226,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between SELF(I) (227:13) and SELF(I+1) (227:13)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(226,9)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(189,16):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_solve_tridiag_ampere_] mod_potentialSolver.f90:189

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm12]
        
    Routine temporaries
        Total         :     258
            Global    :      60
            Local     :     198
        Regenerable   :      14
        Spilled       :      19
        
    Routine stack
        Variables     :     216 bytes*
            Reads     :       6 [1.50e+00 ~ 1.5%]
            Writes    :      12 [2.27e+00 ~ 2.3%]
        Spills        :     104 bytes*
            Reads     :      13 [2.37e+00 ~ 2.4%]
            Writes    :      13 [3.13e+00 ~ 3.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: DEPOSITJ

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (DEPOSITJ) [104] mod_particleMover.f90(120,16)
  -> INLINE: (159,26) MOD_PARTICLEMOVER::PARTICLESUBSTEPNOBFIELD


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at mod_particleMover.f90(139,19)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_particleMover.f90(132,9)
<Peeled loop for vectorization>
   remark #15301: PEEL LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_particleMover.f90(132,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_particleMover.f90(132,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_particleMover.f90(134,9)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_particleMover.f90(134,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(134,9)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at mod_particleMover.f90(135,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_particleMover.f90(138,13)
      remark #25408: memset generated
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at mod_particleMover.f90(138,13)
         remark #15300: LOOP WAS VECTORIZED
         remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      LOOP END

      LOOP BEGIN at mod_particleMover.f90(138,13)
      <Remainder loop for vectorization>
      LOOP END
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(208,13)
   <Peeled loop for vectorization>
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(208,13)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_particleMover.f90(208,13)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at mod_particleMover.f90(210,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_particleMover.f90(210,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_particleMover.f90(210,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_particleMover.f90(210,9)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at mod_particleMover.f90(205,13)
   remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ mod_particleMover.f90(167,38) ]

   LOOP BEGIN at mod_particleMover.f90(148,17)
      remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ mod_particleMover.f90(167,38) ]
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(132,9):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (8, 0)
mod_particleMover.f90(132,9):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_particleMover.f90(134,9):remark #34026: call to memset implemented as a call to optimized library version
mod_particleMover.f90(138,13):remark #34026: call to memset implemented as a call to optimized library version
mod_particleMover.f90(120,16):remark #34051: REGISTER ALLOCATION : [mod_particlemover_mp_depositj_] mod_particleMover.f90:120

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   39[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm24 k1]
        
    Routine temporaries
        Total         :     567
            Global    :     159
            Local     :     408
        Regenerable   :      91
        Spilled       :      17
        
    Routine stack
        Variables     :     492 bytes*
            Reads     :      19 [3.78e-01 ~ 0.4%]
            Writes    :      48 [1.01e+00 ~ 1.0%]
        Spills        :     168 bytes*
            Reads     :      41 [1.26e+00 ~ 1.3%]
            Writes    :      30 [1.03e+00 ~ 1.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NITTFQ

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NITTFQ) [105] nittfq.f(1,18)
  -> (303,15) NITJV
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> (318,12) NITJV
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INLINE: (356,15) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INLINE: (375,12) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INLINE: (434,18) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INLINE: (484,15) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INLINE: (499,12) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> (525,15) NITJV
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nittfq.f(273,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nittfq.f(273,10)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at nittfq.f(273,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nittfq.f(313,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nittfq.f(313,10)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at nittfq.f(313,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nittfq.f(371,10)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at nittfq.f(371,10)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nittfq.f(371,10)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nittfq.f(371,10)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nittfq.f(394,10)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nittfq.f(402,16)
   <Peeled loop for vectorization>
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at nittfq.f(402,16)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at nittfq.f(402,16)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at nittfq.f(407,16)
   <Peeled loop for vectorization>
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END

   LOOP BEGIN at nittfq.f(407,16)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at nittfq.f(407,16)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at nittfq.f(342,23)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

nittfq.f(273,10):remark #34026: call to memset implemented as a call to optimized library version
nittfq.f(313,10):remark #34026: call to memset implemented as a call to optimized library version
nittfq.f(1,18):remark #34051: REGISTER ALLOCATION : [nittfq_] nittfq.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   27[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7 zmm16-zmm20]
        
    Routine temporaries
        Total         :     663
            Global    :     141
            Local     :     522
        Regenerable   :     385
        Spilled       :      33
        
    Routine stack
        Variables     :     284 bytes*
            Reads     :      14 [4.33e-01 ~ 0.4%]
            Writes    :      48 [2.34e+00 ~ 2.3%]
        Spills        :     224 bytes*
            Reads     :     104 [2.78e+00 ~ 2.8%]
            Writes    :      35 [2.43e+00 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_NONLINSOLVERS::JACNITSOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_NONLINSOLVERS::JACNITSOL) [106] ../../SharedModules/src/mod_nonLinSolvers.f90(291,16)
  -> INLINE: (307,18) SOLVE_TRIDIAG


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(192,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(307,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (194:13) and at (193:13)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(199,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(307,18)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between Z(I) (200:13) and Z(I+1) (200:13)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(199,9) inlined into ../../SharedModules/src/mod_nonLinSolvers.f90(307,18)
<Remainder>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(291,16):remark #34051: REGISTER ALLOCATION : [mod_nonlinsolvers_mp_jacnitsol_] ../../SharedModules/src/mod_nonLinSolvers.f90:291

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm4]
        
    Routine temporaries
        Total         :     166
            Global    :      42
            Local     :     124
        Regenerable   :      31
        Spilled       :      10
        
    Routine stack
        Variables     :     240 bytes*
            Reads     :       4 [1.36e+00 ~ 1.4%]
            Writes    :      14 [4.09e+00 ~ 4.1%]
        Spills        :      40 bytes*
            Reads     :       8 [1.99e+00 ~ 2.0%]
            Writes    :       6 [1.71e+00 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NITFD

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NITFD) [107] nitjv.f(213,18)
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (388,15) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (408,15) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (417,15) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (438,15) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (446,15) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (457,15) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_funcnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::FUNCNITSOL
      -> INLINE: (466,15) MOD_NONLINSOLVERS::FUNCNITSOL
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(281,14) DEPOSITJ
        -> ../../SharedModules/src/mod_nonLinSolvers.f90:(284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nitjv.f(405,13)
<Peeled loop for vectorization>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at nitjv.f(405,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitjv.f(405,13)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(764,15)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(764,15)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(764,15)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(764,15)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(764,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(764,15)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(764,15)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(414,13)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(414,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitjv.f(414,13)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nitjv.f(414,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(773,15)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(773,15)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(773,15)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(773,15)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(773,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(773,15)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(773,15)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(424,13)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(424,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitjv.f(424,13)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nitjv.f(424,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(435,13)
<Peeled loop for vectorization>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at nitjv.f(435,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitjv.f(435,13)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(794,15)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(794,15)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(794,15)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(794,15)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(794,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(794,15)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(794,15)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(802,15)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(802,15)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(802,15)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(802,15)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(802,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(802,15)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(802,15)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(452,13)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(452,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitjv.f(452,13)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nitjv.f(452,13)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(813,15)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(813,15)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(813,15)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(813,15)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(813,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(813,15)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(813,15)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(822,15)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(822,15)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(822,15)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(822,15)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(822,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(822,15)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(822,15)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(385,13)
<Peeled loop for vectorization>
   remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at nitjv.f(385,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitjv.f(385,13)
<Remainder loop for vectorization>
   remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(744,15)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(744,15)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9) inlined into nitjv.f(744,15)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(744,15)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(744,15)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(744,15)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9) inlined into nitjv.f(744,15)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(394,13)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at nitjv.f(394,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitjv.f(394,13)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nitjv.f(394,13)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
nitjv.f(213,18):remark #34051: REGISTER ALLOCATION : [nitfd_] nitjv.f:213

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   28[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm13]
        
    Routine temporaries
        Total         :     960
            Global    :     315
            Local     :     645
        Regenerable   :     163
        Spilled       :       5
        
    Routine stack
        Variables     :    2312 bytes*
            Reads     :      10 [1.93e-01 ~ 0.2%]
            Writes    :     265 [5.11e+00 ~ 5.1%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NITJV

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NITJV) [108] nitjv.f(1,18)
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::JACNITSOL
      -> (182,15) MOD_NONLINSOLVERS::JACNITSOL
  -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
     -gpt-> MOD_NONLINSOLVERS::JACNITSOL
      -> (201,15) MOD_NONLINSOLVERS::JACNITSOL
  -> (203,15) NITFD


    Report from: Code generation optimizations [cg]

nitjv.f(1,18):remark #34051: REGISTER ALLOCATION : [nitjv_] nitjv.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   14[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15]
        
    Routine temporaries
        Total         :      61
            Global    :      19
            Local     :      42
        Regenerable   :      30
        Spilled       :       6
        
    Routine stack
        Variables     :       4 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       2 [1.44e+00 ~ 1.4%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NITSTB

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NITSTB) [109] nitstb.f(1,18)
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INLINE: (273,15) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INLINE: (282,12) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INLINE: (321,15) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INLINE: (330,12) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nitstb.f(218,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nitstb.f(218,10)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at nitstb.f(218,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nitstb.f(245,12)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

nitstb.f(218,10):remark #34026: call to memset implemented as a call to optimized library version
nitstb.f(1,18):remark #34051: REGISTER ALLOCATION : [nitstb_] nitstb.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   23[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5 zmm16-zmm18]
        
    Routine temporaries
        Total         :     410
            Global    :      78
            Local     :     332
        Regenerable   :     277
        Spilled       :      16
        
    Routine stack
        Variables     :     220 bytes*
            Reads     :       9 [1.00e+00 ~ 1.0%]
            Writes    :      32 [3.65e+00 ~ 3.6%]
        Spills        :      88 bytes*
            Reads     :      28 [2.80e+00 ~ 2.8%]
            Writes    :      14 [2.49e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: NITGM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (NITGM) [110] nitgm.f(1,18)
  -> INLINE: (292,12) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(ddot_)(P64)
     -gpt-> ddot_
  -> INLINE: (427,15) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INLINE: (451,15) NITJV
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(182,15) MOD_NONLINSOLVERS::JACNITSOL
   -> INDIRECT: raddr(mod_nonlinsolvers_mp_jacnitsol_)(P64)
       -gpt-> MOD_NONLINSOLVERS::JACNITSOL
        -> nitjv.f:(201,15) MOD_NONLINSOLVERS::JACNITSOL
    -> nitjv.f:(203,15) NITFD
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_
  -> INDIRECT: raddr(dnrm2_)(P64)
     -gpt-> dnrm2_


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nitgm.f(236,10)
   remark #25408: memset generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nitgm.f(236,10)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at nitgm.f(236,10)
   <Remainder loop for vectorization>
   LOOP END
LOOP END

LOOP BEGIN at nitgm.f(303,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at nitgm.f(396,10)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (398:36) and at (398:24)
   remark #25439: unrolled with remainder by 2  
LOOP END

LOOP BEGIN at nitgm.f(396,10)
<Remainder>
LOOP END

LOOP BEGIN at nitgm.f(408,13)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

LOOP BEGIN at nitgm.f(459,13)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at nitgm.f(459,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at nitgm.f(459,13)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at nitgm.f(459,13)
<Remainder loop for vectorization>
LOOP END


Non-optimizable loops:


LOOP BEGIN at nitgm.f(495,12)
   remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification

   LOOP BEGIN at nitgm.f(278,7)
      remark #15522: loop was not vectorized: loop control flow is too complex. Try using canonical loop form from OpenMP specification
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nitgm.f(236,10):remark #34026: call to memset implemented as a call to optimized library version
nitgm.f(1,18):remark #34051: REGISTER ALLOCATION : [nitgm_] nitgm.f:1

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm11 zmm16-zmm18]
        
    Routine temporaries
        Total         :     658
            Global    :     156
            Local     :     502
        Regenerable   :     310
        Spilled       :      44
        
    Routine stack
        Variables     :     272 bytes*
            Reads     :      33 [3.62e+00 ~ 3.6%]
            Writes    :      54 [4.39e+00 ~ 4.4%]
        Spills        :     312 bytes*
            Reads     :      98 [1.10e+01 ~ 11.0%]
            Writes    :      53 [3.38e+00 ~ 3.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_NONLINSOLVERS::FUNCNITSOL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_NONLINSOLVERS::FUNCNITSOL) [111] ../../SharedModules/src/mod_nonLinSolvers.f90(272,16)
  -> (281,14) DEPOSITJ
  -> (284,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(280,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(285,9)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(280,9):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/mod_nonLinSolvers.f90(272,16):remark #34051: REGISTER ALLOCATION : [mod_nonlinsolvers_mp_funcnitsol_] ../../SharedModules/src/mod_nonLinSolvers.f90:272

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   22[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm7]
        
    Routine temporaries
        Total         :      99
            Global    :      34
            Local     :      65
        Regenerable   :      18
        Spilled       :       6
        
    Routine stack
        Variables     :     328 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :      36 [9.17e+00 ~ 9.2%]
        Spills        :       8 bytes*
            Reads     :       1 [2.55e-01 ~ 0.3%]
            Writes    :       1 [2.55e-01 ~ 0.3%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_POISSON

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_POISSON) [112] mod_potentialSolver.f90(128,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(150,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (152:13) and at (151:13)
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 3
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(158,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(158,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(158,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(160,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed FLOW dependence between at (161:13) and at (161:13)
   remark #25439: unrolled with remainder by 2  
   remark #25456: Number of Array Refs Scalar Replaced In Loop: 2
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(160,9)
<Remainder>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(163,9)
   remark #25399: memcopy generated
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at mod_potentialSolver.f90(163,9)
      remark #15300: LOOP WAS VECTORIZED
      remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
   LOOP END

   LOOP BEGIN at mod_potentialSolver.f90(163,9)
   <Remainder loop for vectorization>
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
   LOOP END
LOOP END


Non-optimizable loops:


LOOP BEGIN at mod_potentialSolver.f90(145,9)
   remark #15534: loop was not vectorized: loop contains arithmetic if or computed goto. Consider using if-then-else statement.    [ mod_potentialSolver.f90(137,26) ]
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(158,9):remark #34026: call to memcpy implemented as a call to optimized library version
mod_potentialSolver.f90(163,9):remark #34026: call to memcpy implemented as a call to optimized library version
mod_potentialSolver.f90(128,16):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_solve_tridiag_poisson_] mod_potentialSolver.f90:128

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   19[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm5]
        
    Routine temporaries
        Total         :     337
            Global    :      82
            Local     :     255
        Regenerable   :      19
        Spilled       :      17
        
    Routine stack
        Variables     :     288 bytes*
            Reads     :       6 [1.28e+00 ~ 1.3%]
            Writes    :      20 [3.65e+00 ~ 3.6%]
        Spills        :     104 bytes*
            Reads     :      22 [3.41e+00 ~ 3.4%]
            Writes    :      13 [2.65e+00 ~ 2.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INITIALIZERANDUNIFORM

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INITIALIZERANDUNIFORM) [113] ../../SharedModules/src/mod_particle.f90(75,16)
  -> INLINE: (84,21) RAN2
  -> INLINE: (85,45) GETLFROMX


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at ../../SharedModules/src/mod_particle.f90(81,15)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(83,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between IRAND (54:9) and IRAND (56:24)

   LOOP BEGIN at mod_domain.f90(184,9) inlined into ../../SharedModules/src/mod_particle.f90(85,45)
      remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
      remark #25478: While Loop Unrolled by 2  
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(75,16):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_initializeranduniform_] ../../SharedModules/src/mod_particle.f90:75

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rbp rsi rdi r8-r15 zmm0-zmm4 zmm16]
        
    Routine temporaries
        Total         :     188
            Global    :      34
            Local     :     154
        Regenerable   :      58
        Spilled       :       8
        
    Routine stack
        Variables     :     176 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :      15 [1.80e+00 ~ 1.8%]
        Spills        :     112 bytes*
            Reads     :      20 [3.93e+00 ~ 3.9%]
            Writes    :      20 [2.45e+00 ~ 2.5%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INITIALIZE_N_AVE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INITIALIZE_N_AVE) [114] ../../SharedModules/src/mod_particle.f90(68,21)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(72,41)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(72,41)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_particle.f90(72,41)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_particle.f90(68,21):remark #34051: REGISTER ALLOCATION : [mod_particle_mp_initialize_n_ave_] ../../SharedModules/src/mod_particle.f90:68

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   16[ rax rdx rcx rsi rdi r8-r11 zmm0-zmm6]
        
    Routine temporaries
        Total         :      41
            Global    :      17
            Local     :      24
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INITIALIZESCHEME

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INITIALIZESCHEME) [115] mod_Scheme.f90(14,16)


    Report from: Code generation optimizations [cg]

mod_Scheme.f90(14,16):remark #34051: REGISTER ALLOCATION : [mod_scheme_mp_initializescheme_] mod_Scheme.f90:14

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    6[ rax rdx rcx rsi rdi r8]
        
    Routine temporaries
        Total         :      32
            Global    :       8
            Local     :      24
        Regenerable   :      26
        Spilled       :       0
        
    Routine stack
        Variables     :     112 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       9 [2.20e+01 ~ 22.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: READINITIALINPUTS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (READINITIALINPUTS) [116] ../../SharedModules/src/constants.f90(25,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/constants.f90(49,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/constants.f90(49,9)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 4  
LOOP END

LOOP BEGIN at ../../SharedModules/src/constants.f90(64,17)
   remark #15521: loop was not vectorized: loop control variable was not identified. Explicitly compute the iteration count before executing the loop or try using canonical loop form from OpenMP specification
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/constants.f90(56,13):remark #34026: call to memcpy implemented as a call to optimized library version
../../SharedModules/src/constants.f90(57,13):remark #34026: call to memmove implemented as a call to optimized library version
../../SharedModules/src/constants.f90(25,16):remark #34051: REGISTER ALLOCATION : [constants_mp_readinitialinputs_] ../../SharedModules/src/constants.f90:25

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm5 k0]
        
    Routine temporaries
        Total         :    1134
            Global    :     118
            Local     :    1016
        Regenerable   :     602
        Spilled       :      16
        
    Routine stack
        Variables     :    2576 bytes*
            Reads     :      20 [2.22e+00 ~ 2.2%]
            Writes    :     200 [1.89e+01 ~ 18.9%]
        Spills        :      88 bytes*
            Reads     :      19 [6.90e-01 ~ 0.7%]
            Writes    :      12 [7.28e-01 ~ 0.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INITIALIZERANDOMGENERATORS

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INITIALIZERANDOMGENERATORS) [117] ../../SharedModules/src/mod_BasicFunctions.f90(108,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(116,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(108,16):remark #34051: REGISTER ALLOCATION : [mod_basicfunctions_mp_initializerandomgenerators_] ../../SharedModules/src/mod_BasicFunctions.f90:108

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   18[ rax rdx rcx rbx rbp rsi rdi r8-r10 r12-r15 zmm0-zmm2 zmm16]
        
    Routine temporaries
        Total         :     143
            Global    :      36
            Local     :     107
        Regenerable   :      27
        Spilled       :       6
        
    Routine stack
        Variables     :      16 bytes*
            Reads     :       2 [7.56e-01 ~ 0.8%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: INITIALIZESOLVER

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (INITIALIZESOLVER) [118] ../../SharedModules/src/mod_nonLinSolvers.f90(102,16)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(132,13)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_nonLinSolvers.f90(132,13)
<Remainder loop for vectorization>
   remark #25436: completely unrolled by 2  
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(102,16):remark #34051: REGISTER ALLOCATION : [mod_nonlinsolvers_mp_initializesolver_] ../../SharedModules/src/mod_nonLinSolvers.f90:102

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   15[ rax rdx rcx rbx rsi rdi r8-r15 zmm0]
        
    Routine temporaries
        Total         :     356
            Global    :      30
            Local     :     326
        Regenerable   :     199
        Spilled       :       5
        
    Routine stack
        Variables     :     328 bytes*
            Reads     :       3 [3.65e-01 ~ 0.4%]
            Writes    :      44 [1.46e+01 ~ 14.6%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: SOLVEINITIALPOTENTIAL

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (SOLVEINITIALPOTENTIAL) [119] ../../SharedModules/src/mod_nonLinSolvers.f90(88,16)
  -> (94,14) DEPOSITRHO
  -> INDIRECT: raddr(mod_potentialsolver_mp_solve_tridiag_poisson_)(P64)
     -tbp-> MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_POISSON
      -> (95,14) MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_POISSON


    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_nonLinSolvers.f90(88,16):remark #34051: REGISTER ALLOCATION : [mod_nonlinsolvers_mp_solveinitialpotential_] ../../SharedModules/src/mod_nonLinSolvers.f90:88

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rdx rcx rsi rdi r8-r11 r13-r14]
        
    Routine temporaries
        Total         :      28
            Global    :       9
            Local     :      19
        Regenerable   :       7
        Spilled       :       2
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       8 [1.82e+01 ~ 18.2%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_POISSON

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_POISSON) [120] mod_potentialSolver.f90(167,14)
  -> INLINE: (172,14) TRIMUL


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(172,14)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(172,14)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(172,14)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(172,14)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(174,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between RES (177:17) and RES (177:17)
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_potentialSolver.f90(167,14):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_geterror_tridiag_poisson_] mod_potentialSolver.f90:167

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     179
            Global    :      47
            Local     :     132
        Regenerable   :      11
        Spilled       :      19
        
    Routine stack
        Variables     :      72 bytes*
            Reads     :       2 [3.67e-01 ~ 0.4%]
            Writes    :       4 [5.54e-01 ~ 0.6%]
        Spills        :     104 bytes*
            Reads     :      14 [2.03e+00 ~ 2.0%]
            Writes    :      14 [2.21e+00 ~ 2.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_AMPERE

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_AMPERE) [121] mod_potentialSolver.f90(278,14)
  -> INLINE: (284,14) TRIMUL


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(284,14)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(284,14)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(284,14)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at ../../SharedModules/src/mod_BasicFunctions.f90(211,9) inlined into mod_potentialSolver.f90(284,14)
<Remainder loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(285,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed OUTPUT dependence between at (288:17) and at (293:21)
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(299,9)
<Peeled loop for vectorization>
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(299,9)
   remark #15300: LOOP WAS VECTORIZED
   remark #26013: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(299,9)
<Remainder loop for vectorization>
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at mod_potentialSolver.f90(299,9)
<Remainder loop for vectorization>
LOOP END

    Report from: Code generation optimizations [cg]

../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34060: alignment of adjacent dense (unit-strided stencil) loads is (alignment, offset): (1, 0)
../../SharedModules/src/mod_BasicFunctions.f90(212,22):remark #34050: adjacent dense (unit-strided stencil) loads seem unprofitable to optimize.
mod_potentialSolver.f90(278,14):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_geterror_tridiag_ampere_] mod_potentialSolver.f90:278

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   29[ rax rdx rcx rsi rdi r8-r15 zmm0-zmm15]
        
    Routine temporaries
        Total         :     290
            Global    :      71
            Local     :     219
        Regenerable   :      13
        Spilled       :      25
        
    Routine stack
        Variables     :     144 bytes*
            Reads     :       4 [4.74e-01 ~ 0.5%]
            Writes    :       8 [7.15e-01 ~ 0.7%]
        Spills        :     152 bytes*
            Reads     :      23 [2.30e+00 ~ 2.3%]
            Writes    :      23 [2.44e+00 ~ 2.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: MOD_POTENTIALSOLVER^GETCHARGECONTINUITYERROR

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (MOD_POTENTIALSOLVER^GETCHARGECONTINUITYERROR) [122] mod_potentialSolver.f90(303,14)


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at mod_potentialSolver.f90(311,9)
   remark #15344: loop was not vectorized: vector dependence prevents vectorization. First dependence is shown below. Use level 5 report for details
   remark #15346: vector dependence: assumed ANTI dependence between CHARGEERROR (316:21) and CHARGEERROR (316:21)
LOOP END

    Report from: Code generation optimizations [cg]

mod_potentialSolver.f90(303,14):remark #34051: REGISTER ALLOCATION : [mod_potentialsolver_mp_getchargecontinuityerror_] mod_potentialSolver.f90:303

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   21[ rax rdx rcx rsi rdi r8-r13 zmm0-zmm9]
        
    Routine temporaries
        Total         :      70
            Global    :      25
            Local     :      45
        Regenerable   :       2
        Spilled       :       2
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [1.41e+00 ~ 1.4%]
            Writes    :       2 [1.41e+00 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Profile guided optimizations [pgo]



Profile feedback used a statically estimated profile for the following routines:

  File: ../../SharedModules/src/BoundPlasmaExample.f90
        BOUNDPLASMAEXAMPLE                          [Line     1]

  File: ../../SharedModules/src/constants.f90
        READINITIALINPUTS                           [Line    25]

  File: ../../SharedModules/src/mod_BasicFunctions.f90
        INITIALIZERANDOMGENERATORS                  [Line   108]
        SOLVENORMALEQUATION                         [Line   255]
        INDEXSORTARRAY                              [Line   315]

  File: ../../SharedModules/src/mod_NullCollision.f90
        MOD_NULLCOLLISION::NULLCOLLISION_CONSTRUCTOR[Line    39]
        GENERATECOLLISION                           [Line   103]
        IONIZATIONCOLLISIONISOTROPIC                [Line   349]
        ELASTICEXCITCOLLISIONISOTROPIC              [Line   501]
        WRITECOLLISIONCROSSSECTION                  [Line   554]
        MOD_NULLCOLLISION::SCATTERVECTOR            [Line   569]
        READNULLCOLLISIONINPUTS                     [Line   601]

  File: ../../SharedModules/src/mod_nonLinSolvers.f90
        SOLVEINITIALPOTENTIAL                       [Line    88]
        INITIALIZESOLVER                            [Line   102]
        MOD_NONLINSOLVERS::SOLVEDIVAMPEREANDERSON   [Line   152]
        SOLVEPOTENTIAL                              [Line   251]
        MOD_NONLINSOLVERS::FUNCNITSOL               [Line   272]
        MOD_NONLINSOLVERS::JACNITSOL                [Line   291]
        MOD_NONLINSOLVERS::SOLVEJFNK                [Line   313]

  File: ../../SharedModules/src/mod_particle.f90
        MOD_PARTICLE::PARTICLE_CONSTRUCTOR          [Line    44]
        INITIALIZE_N_AVE                            [Line    68]
        INITIALIZERANDUNIFORM                       [Line    75]
        GENERATE3DMAXWELLIAN                        [Line    93]
        GETKEAVE                                    [Line   119]
        GETTOTALMOMENTUM                            [Line   132]
        GETTOTALKE                                  [Line   144]
        WRITEPHASESPACE                             [Line   161]
        WRITELOCALTEMPERATURE                       [Line   175]
        READCHARGEDPARTICLEINPUTS                   [Line   212]

  File: ../../SharedModules/src/mod_particleInjection.f90
        ADDMAXWELLIANLOSTPARTICLES                  [Line    16]
        REFLUXPARTICLES                             [Line    42]
        INJECTATBOUNDARY                            [Line    71]
        INJECTUNIFORMFLUX                           [Line   134]
        MAXWELLIANHEATING                           [Line   162]
        READINJECTIONINPUTS                         [Line   184]
        WRITEPARTICLEINJECTIONINPUTS                [Line   244]

  File: ../../SharedModules/src/mod_simulation.f90
        MOD_SIMULATION::WRITEPHI..1                 [Line    28]
        MOD_SIMULATION::WRITEPHI..0                 [Line    28]
        MOD_SIMULATION::GENERATESAVEDIRECTORY       [Line   264]
        SOLVESIMULATION                             [Line   299]
        SOLVESIMULATIONFINALAVERAGE                 [Line   593]

  File: ../../SharedModules/src/mod_targetParticle.f90
        GENERATE3DMAXWELLIANVELOCITY                [Line    43]
        READNEUTRALPARTICLEINPUTS                   [Line    60]

  File: mod_Scheme.f90
        INITIALIZESCHEME                            [Line    14]
        DEPOSITRHO                                  [Line    84]
        WRITEPARTICLEDENSITY..0                     [Line   101]
        WRITEPARTICLEDENSITY..1                     [Line   101]

  File: mod_domain.f90
        MOD_DOMAIN::DOMAIN_CONSTRUCTOR              [Line    39]
        CONSTRUCTGRID                               [Line    57]
        CONSTRUCTSINEGRID                           [Line    77]
        CONSTRUCTHALFSINEGRID                       [Line    96]
        CONSTRUCTEXPHALFGRID                        [Line   118]
        CONSTRUCTUNIFORMGRID                        [Line   146]
        MAKEARRAYSFROMGRID                          [Line   157]
        GETLFROMX                                   [Line   173]
        WRITEDOMAIN                                 [Line   197]
        READWORLD                                   [Line   217]

  File: mod_particleMover.f90
        DEPOSITJ                                    [Line   120]
        MOVEPARTICLES                               [Line   216]

  File: mod_potentialSolver.f90
        MOD_POTENTIALSOLVER^CONSTRUCT_DIAGMATRIX    [Line    86]
        MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_POISSON   [Line   128]
        MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_POISSON[Line   167]
        MOD_POTENTIALSOLVER^SOLVE_TRIDIAG_AMPERE    [Line   189]
        MOD_POTENTIALSOLVER^GETERROR_TRIDIAG_AMPERE [Line   278]
        MOD_POTENTIALSOLVER^GETCHARGECONTINUITYERROR[Line   303]
        MOD_POTENTIALSOLVER^GETTOTALPE..1           [Line   338]
        MOD_POTENTIALSOLVER^GETTOTALPE              [Line   338]
        MOD_POTENTIALSOLVER^GETTOTALPE..0           [Line   338]
        MOD_POTENTIALSOLVER^GETENERGYFROMBOUNDARY   [Line   352]
        MOD_POTENTIALSOLVER^SETRFVOLTAGE            [Line   364]
        MOD_POTENTIALSOLVER^RESETVOLTAGE            [Line   375]
        MOD_POTENTIALSOLVER^AVERFVOLTAGE            [Line   381]
        READSOLVER                                  [Line   408]

  File: nitbt.f
        NITBT                                       [Line     1]

  File: nitgm.f
        NITGM                                       [Line     1]

  File: nitjv.f
        NITJV                                       [Line     1]
        NITFD                                       [Line   213]

  File: nitsol.f
        NITSOL                                      [Line     1]

  File: nitstb.f
        NITSTB                                      [Line     1]

  File: nittfq.f
        NITTFQ                                      [Line     1]


  0 out of 80 routine(s) used training profile data for PGO feedback
  0 out of 80 routine(s) were unable to use training profile data for PGO feedback
  0 out of 80 routine(s) were unable to find training profile data for PGO feedback
  80 out of 80 routine(s) used a static estimate profile for PGO feedback



